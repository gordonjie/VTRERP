<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kingdee.BOS</name>
    </assembly>
    <members>
        <member name="T:Kingdee.BOS.AppServer.AppServerObject">
            <summary>
            应用服务对象基类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.AppServer.AppServerObject.Context">
            <summary>
            登录上下文
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AuthenticationMethod">
            <summary>
            登陆方式
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.AuthenticationMethod.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthenticationMethod.AuthenticationMethodType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthenticationMethod.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthenticationMethod.MultiLangName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AuthenticationType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.ICAServerAuth">
            <summary>
            CA服务端验证接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.VerifySignature(Kingdee.BOS.Authentication.CA.CASignDataInfo)">
            <summary>
            验证签名
            </summary>
            <param name="signDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.VerifyCertificate(Kingdee.BOS.Authentication.CA.CertificateInfo)">
            <summary>
            验证证书
            </summary>
            <param name="certInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.GetCNName(System.String)">
            <summary>
            获取证书拥有者的名称
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAServerAuth.GetCompanyName(System.String)">
            <summary>
            获取CA证书的公司名称
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo">
            <summary>
            动态密码卡详细信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.SecretKey">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.ForbidStatus">
            <summary>
            禁用状态 A：正常 B:禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.SerialNumber">
            <summary>
            卡号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordInfo.Id">
            <summary>
            内部唯一标识号
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo">
            <summary>
            动态密码卡校验信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo.SecretKey">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.DC.IDynamicPasswordAuth">
            <summary>
            动态密码卡验证接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.DC.IDynamicPasswordAuth.VerifyDynamicPassword(Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo)">
            <summary>
            验证动态密码卡
            </summary>
            <param name="passwordInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.DC.IDynamicPasswordAuth.SynchronizeTime(Kingdee.BOS.Authentication.DC.DynamicPasswordVerifyInfo)">
            <summary>
            动态密码卡时间同步
            </summary>
            <param name="passwordInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.AuthResult">
            <summary>
            认证结果类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.HexCode">
            <summary>
            消息代码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.Success">
            <summary>
            是否认证成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.AuthResult.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.ICAClientAuth">
            <summary>
            CA的客户端验证接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAClientAuth.GetCerts">
            <summary>
            获取有效的证书
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAClientAuth.SignMessage(System.String,System.String)">
            <summary>
            数据签名
            </summary>
            <param name="subject">证书使用者</param>
            <param name="rawMessage">签名原文</param>
            <returns>签名结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Authentication.CA.ICAClientAuth.GetCNName(System.String)">
            <summary>
            获取证书拥有者的名称
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CertificateInfo">
            <summary>
            CA证书
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CASignDataInfo">
            <summary>
            CA签名信息类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataInfo.RawSignData">
            <summary>
            签名前原始的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataInfo.SignedData">
            <summary>
            签名后的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.LoginType">
            <summary>
            登录入口类型：1：正常ERP登录 2:客户门户外部登录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.PasswordIsEncrypted">
            <summary>
            密码是否已经加密；
            true:加密；false:非加密；
            默认值为true；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.IpAddress">
            <summary>
            登录的客户端IP
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.ComputerName">
            <summary>
            登录的客户端机器名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.RawSignData">
            <summary>
            签名前原始的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginInfo.SignedData">
            <summary>
            签名后的数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginType">
            <summary>
            登录入口类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CASignDataResult">
            <summary>
            CA数据签名结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataResult.RawSignData">
            <summary>
            签名前原始的数据
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.CA.CASignDataResult.SignedData">
            <summary>
            签名后的数据
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.CA.CertificateDetailInfo">
            <summary>
            证书详细信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BTree`2">
            <summary>
            A Generic BTree
            </summary>
            <typeparam name="TKey">The type of the key used by this BTree</typeparam>
            <typeparam name="TValue">The type of the values to be stored in this BTree</typeparam>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.Contains(`0,`1)">
            <summary>
            Test if the subtree contains the key/value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>true if the key/value node exists</returns>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.ContainsKey(`0)">
            <summary>
            Test if the subtres contains the key
            </summary>
            <param name="key">The key to look for</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.Find(`0,System.Boolean)">
            <summary>
            Find a node in the subtree that matches the specified key
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">If true, the last matching node will be returned, if false, the first matching node will be returned</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.IBTree`2.Find(`0,`1)">
            <summary>
            Find a node in the subtree that matches the specified key/value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.Count">
            <summary>
            The number of nodes in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.MaxDepth">
            <summary>
            The maximum depth of this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.Largest">
            <summary>
            Returns the node with the largest key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTree`2.Smallest">
            <summary>
            Returns the node with the smallest key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._root">
            <summary>
            The root node of this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._keyComparer">
            <summary>
            The key comparer delegate used to order keys in this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._valueEqualityComparer">
            <summary>
            The value equality comparer used to locate values in this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._count">
            <summary>
            The number of nodes in this BTree
            </summary>
        </member>
        <member name="F:Kingdee.BOS.BTree`2._initializationCount">
            <summary>
            The count of the number of times BeginInit is called
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Construct a BTree
            </summary>
            <param name="allowDuplicates">if true, duplication keys are allowed</param>
            <param name="keyComparer">The delegate used to order keys</param>
            <param name="valueEqualityComparer">The delegate used to test value equality</param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Add(`0,`1)">
            <summary>
            Add a new node to the tree
            </summary>
            <param name="key">The key of the node</param>
            <param name="value">The value of the node</param>
            <returns>true if the node was added, false if the node was a duplicate and not added</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Remove(`0,System.Boolean)">
            <summary>
            Remove a node from the tree
            </summary>
            <param name="key">The key of the node to be removed</param>
            <param name="lastNode">if true the last matching key will be removed, otherwise the first matching key will be removed</param>
            <returns>true if the node was removed, false if the node was not removed</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Remove(`0,`1)">
            <summary>
            Remove a specific key/value from the tree
            </summary>
            <param name="key">The key to be removed</param>
            <param name="value">The value to be remvoed</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Remove(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            Remove the node
            </summary>
            <param name="currentNode">The node to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.removeNodeRight(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            Remove the node using the right subtree
            </summary>
            <param name="parentNode"></param>
            <param name="currentNode"></param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.removeNodeLeft(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            Remove the node using the left subtree
            </summary>
            <param name="parentNode"></param>
            <param name="currentNode"></param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ContainsKey(`0)">
            <summary>
            return true if the key exists in the tree
            </summary>
            <param name="key">The key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Contains(`0,`1)">
            <summary>
            return true if the key/value pair exist in the tree
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Contains(Kingdee.BOS.BTree{`0,`1}.Node)">
            <summary>
            return true if the key exists in the tree
            </summary>
            <param name="key">The key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Find(`0,System.Boolean)">
            <summary>
            Return the tree node containing the matching key
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">If true the last matching node will be returned, else the first matching node</param>
            <returns>The tree node found or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Find(`0,`1)">
            <summary>
            Return the tree node containing the matching key and value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The tree node found or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ToString">
            <summary>
            Convert the tree to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.GetEnumerator">
            <summary>
            Return a Node enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.System#Collections#Generic#IEnumerable{Kingdee#BOS#IBTree{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns a subtree enumerator
            </summary>
            <returns>The subtree enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,System.Boolean)">
            <summary>
            Find a node containing a matchin key.
            
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">if true, the node with the last match key will be returned.  If false, the first matching node will be returned</param>
            <returns>the matching node, or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,`1)">
            <summary>
            Find a node that contains a matching key and value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ToCString(System.String)">
            <summary>
            Convert a string to an escaped c-string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.ToString(System.Object)">
            <summary>
            Convert a value to a string representation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Clear">
            <summary>
            Clear the btree of all nodes
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.BeginInit">
            <summary>
            Indicate that the btree is initializing
            (Can be called more then once)
            While initializing CollectionChanged events are suppressed.
            <see cref="M:Kingdee.BOS.BTree`2.EndInit"/>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.EndInit">
            <summary>
            Indicate that the btree has finished initializing.
            Must be balance with BeginInit
            
            If the collection changed while initializing a CollectionChanged event with NotifyCollectionChangedAction.Reset will be emitted.
            <see cref="M:Kingdee.BOS.BTree`2.BeginInit"/>
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.AllowDuplicates">
            <summary>
            If true duplicates keys are allowed
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Root">
            <summary>
            The root node of this BTree.
            Null if the btree is empty
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Item(`0)">
            <summary>
            Gets or Sets the value of the first matching node for the supplied key.
            
            throws ArgumentOutOfRangeException if the node is not found on get
            
            On set if the node is found the value will be replaced, if not found a new node will be added to the tree
            </summary>
            <param name="key">The key to look for</param>
            <returns>The value of the matching node</returns>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Count">
            <summary>
            The number of node in the tree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Largest">
            <summary>
            The last node (ordered by key in the tree)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Smallest">
            <summary>
            The first node (ordered by key in the tree)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.MaxDepth">
            <summary>
            The maximum depth of this btree (calculated)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Largest">
            <summary>
            The node with the largest key in the tree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Kingdee#BOS#IBTree{TKey@TValue}#Smallest">
            <summary>
            The node with the smallest key in the tree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.IsInitializing">
            <summary>
            true if the Btree is initializing
            <see cref="M:Kingdee.BOS.BTree`2.BeginInit"/>
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BTree`2.Enumerator">
            <summary>
            The node enumerator used to walk the BTree
            </summary>
        </member>
        <member name="T:Kingdee.BOS.BTree`2.Node">
            <summary>
            A node of the BTree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Depth">
            <summary>
            The zero-based depth of the node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Key">
            <summary>
            The node key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Value">
            <summary>
            The ndoe value
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Next">
            <summary>
            The next node, in key order
            </summary>
        </member>
        <member name="P:Kingdee.BOS.IBTreeNode`2.Previous">
            <summary>
            The previous node, in key order
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.calculateMaxDepth(System.Int32)">
            <summary>
            calcuates the maximum depth of this subtree 
            </summary>
            <param name="parentDepth"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.#ctor(Kingdee.BOS.BTree{`0,`1},Kingdee.BOS.BTree{`0,`1}.Node,`0,`1)">
            <summary>
            Constructs a node with parent, key/value and no children
            </summary>
            <param name="tree">THe tree this node belongs to</param>
            <param name="parent">The parent of this node, null if this is the root node</param>
            <param name="key">The node key</param>
            <param name="value">The node value</param>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.#ctor">
            <summary>
            Construct an empty node
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Remove">
            <summary>
            Remove this node from the tree
            </summary>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Find(`0,System.Boolean)">
            <summary>
            Find a node by key in the subtree
            </summary>
            <param name="key"></param>
            <param name="lastNode"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Find(`0,`1)">
            <summary>
            Find a node containing the matching key and value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The tree node found or null if not found</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Contains(`0,`1)">
            <summary>
            returns true if the key/value exists in this subtree
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>true if the key/value exists</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.ContainsKey(`0)">
            <summary>
            returns true if the key exists in this subtree
            </summary>
            <param name="key">The key to look for</param>
            <returns>true if the key exists</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.ToString">
            <summary>
            Return a string representation of the subtree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.GetEnumerator">
            <summary>
            Creates an node enumerator for this BTree
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Creates an node enumerator for this BTree
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,System.Boolean)">
            <summary>
            Finds a node matching the specified key
            </summary>
            <param name="key">The key to look for</param>
            <param name="lastNode">if true the last matching node will be returned.  If false, the first matching node will be returned</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Find(`0,`1)">
            <summary>
            Finds a node matching the specified key/value
            </summary>
            <param name="key">The key to look for</param>
            <param name="value">The value to look for</param>
            <returns>The matching node or null</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.System#Collections#Generic#IEnumerable{Kingdee#BOS#IBTree{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns a node enumerator 
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="M:Kingdee.BOS.BTree`2.Node.System#Collections#Generic#IEnumerable{Kingdee#BOS#IBTreeNode{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns a node enumerator 
            </summary>
            <returns>The node enumerator</returns>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Depth">
            <summary>
            The zero-based depth of the current node (calculated)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.MaxDepth">
            <summary>
            The maximum depth of this subtree (calculated)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Count">
            <summary>
            The number of nodes in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Parent">
            <summary>
            The parent node.
            Parent will be null if this is the root node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Tree">
            <summary>
            The owning tree of this node.
            null if the node was deleted
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Left">
            <summary>
            The left node, or the smaller subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.HasLeft">
            <summary>
            True if there is a left node available
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Right">
            <summary>
            The right node, or the larger subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.HasRight">
            <summary>
            True if there is a right node available
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Key">
            <summary>
            The key of the node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Value">
            <summary>
            The value of the node
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Next">
            <summary>
            The next node, in key order, in the subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Previous">
            <summary>
            The previous node, in key order, in the subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Largest">
            <summary>
            The node with the largest key in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Smallest">
            <summary>
            The node with the smallest key in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Largest">
            <summary>
            The largest node in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTree{TKey@TValue}#Smallest">
            <summary>
            The smallest node in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTreeNode{TKey@TValue}#Next">
            <summary>
            The next logical node in this subtree
            </summary>
        </member>
        <member name="P:Kingdee.BOS.BTree`2.Node.Kingdee#BOS#IBTreeNode{TKey@TValue}#Previous">
            <summary>
            The previous logical node in this subtree
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.IndexedArray`1”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.IndexedArray`1.AddIndex(System.String,System.Boolean)">
            <summary>
            增加索引
            </summary>
            <param name="prop">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.IndexedArray`1.RebuildIndex(System.String)">
            <summary>
            建立/重建属性索引
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Kingdee.BOS.IndexedArray`1.Add(`0)">
            <summary>
            新增元素
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Kingdee.BOS.IndexedArray`1.Find(System.String,System.String)">
            <summary>
            查找元素
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.IndexedArray`1.Item(System.Int32)">
            <summary>
            获取指定索引元素
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.IndexedArray`1.Count">
            <summary>
            元素总数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.IKCacheManager">
            <summary>
            Kingdee Cache Manager Interface
            <example>IKCacheManager KCMger = KCacheManagerFactory.Instance.GetCacheManager("Customer", "2");</example>
            <remarks></remarks>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{System.String})">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="ts">超时设置，默认看配置信息，一般是300秒</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <param name="version">传入上一次缓存项的版本或返回缓存项的当前版本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.String,System.Object,System.TimeSpan,System.Collections.Generic.List{System.String},System.Object@)">
            <summary>
            写入缓存
            </summary>
            <param name="key">缓存项Key值</param>
            <param name="value">缓存项</param>
            <param name="ts">超时设置，默认看配置信息，一般是300秒</param>
            <param name="tags"><!-- List<string>类型的多个缓存项标签 --></param>
            <param name="version">传入上一次缓存项的版本或返回缓存项的当前版本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Put(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Kingdee.BOS.Cache.KCacheItem}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}}@)">
            <summary>
            批量写入缓存
            </summary>
            <param name="keys">写入缓存信息列表，List[KeyValuePair[string,KCacheItem]]</param>
            <param name="vers">返回缓存版本列表</param>
            <returns><!-- List<KeyValuePair<string, bool>> --></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="key">缓存项Key值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.GetByTags(System.Collections.Generic.List{System.String},Kingdee.BOS.Cache.GetBy)">
            <summary>
            批量获取缓存项
            </summary>
            <param name="tags">Put方法加入的tags，如果没有穿默认会加入Region和Key值。</param>
            <param name="by">参考GetBy枚举描述</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="key">缓存项Key值</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.Remove(System.Collections.Generic.List{System.String})">
            <summary>
            批量移除缓存项 By Key列表
            </summary>
            <param name="keys"><!-- 缓存Key值列表，List<string> --></param>
            <returns><!-- 缓存移除结果集，List<KeyValuePair<string, bool>> --></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.RemoveByTags(System.Collections.Generic.List{System.String},Kingdee.BOS.Cache.GetBy)">
            <summary>
            批量移除缓存项 By Tags列表
            </summary>
            <param name="tags"><!-- Tags列表List<string> --></param>
            <param name="by"> 参见枚举类型KCacheEnum.GetBy </param>
            <returns><!-- 缓存移除结果集，List<KeyValuePair<string, bool>> --></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.ClearRegion">
            <summary>
            清理缓存区域
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.ServerDescription">
            <summary>
            获取对应Cache服务器的描述信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.SetDefaultRegion(System.String,System.String)">
            <summary>
            设置Cache Manager的默认区域
            </summary>
            <param name="region">缓存项区域设置</param>
            <param name="area">缓存区域设置，全局：帐套ID，局部：Context.TokenID+帐套ID</param>
        </member>
        <member name="M:Kingdee.BOS.Cache.IKCacheManager.GetObjectInfos">
            <summary>
            获取所有对象的信息列表，用逗号分隔,此接口仅用于缓存管理,性能成本非常高。
            </summary>
            <returns>[[Key,ValueType,Size],[...],...]</returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.IsSerial">
            <summary>
            必须序列化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.Switch">
            <summary>
            本区缓存是否已经开启，True开启，False不开启；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.IsLive">
            <summary>
            缓存服务可用信号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.LogSwitch">
            <summary>
            日志是否开启
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.DefTimeSpan">
            <summary>
            缺省过期时间间隔。如果实现插件返回0秒，则从系统Config文件设置中取得间隔秒数。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.IKCacheManager.DMethodProxy">
            <summary>
            方法的动态透明代理，Get的首参数必须为String字段，并作为缓存项的Key值。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.AbstractKCacheManager.GetObjectInfos">
            <summary>
            获取所有对象的信息列表，用逗号分隔,此接口仅用于缓存管理,性能成本非常高。
            </summary>
            <returns>[[Key,ValueType,Size],[...],...]</returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.AbstractKCacheManager.IsSerial">
            <summary>
            必须序列化
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.AbstractKCacheManager.Svr">
            <summary>
            缓存服务管理对象，实现IKCacheManager接口。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheCallHandlerAttribute">
            <summary>KCache的AOP代理设置属性
            <example>
            <!--
            [KCacheAOP("default")]
            class Base{}
            [KCacheAOP("Product",AreaInArgsPos =2 ,KeyInArgsPos =1,IsBatch=false,OperType=OperType.Get)]
            public string GetName(string key,string area)
            {
                return "James."+key;
            }
            -->
            </example>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.#ctor">
            <summary>
            K/3使用默认为空的Cache
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="region">区域设置</param>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.Region">
            <summary>
            区域设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.RelationUpdateSetting">
            <summary>
            关联更新设置，以逗号隔开。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.AreaInArgsPos">
            <summary>
            Area参数位置,从1开始。这里要求必须传入Area参数，否则默认为String.Empty,这时跨帐套或客户端会有串扰问题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.Area2ArgName">
            <summary>
            Area对应参数名，这里要求必须传入Area参数，否则默认为String.Empty,这时跨帐套或客户端会有串扰问题。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.KeyInArgsPos">
            <summary>
            Key参数位置,从1开始。如果设置为0或默认，则自动生成key值。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.Key2ArgName">
            <summary>
            Key对应参数名，如果设置为string.Empty或默认，则自动生成key值。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.IsBatch">
            <summary>
            <!-- 是否批量操作,IsBatch=true则KeyInArgsPos对应参数必须为List<string>，如果false则为String。-->
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheCallHandlerAttribute.OperType">
            <summary>
            操作类型，参考OperType
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheMethodCallHandler">
            <summary>
            Method AOP Injection Handler
            The injected class must inherit from MarshalByRefObject . 
            And the member which will be injected must be defined with [KCacheCallHandler] attribute.
            Configuration : <see cref="!:..\..\CacheTest\app.config"/>
            
            <example><!-- 
                /// Client Invocation the customer as following example.
                Customer cus = PolicyInjection.Create<Customer>(); 
                /// Customer class member defined as following example.
                [KCacheCallHandler("Product",Area2ArgName = "acctID", Key2ArgName = "CustID",OperType=OperType.Get)]
                public string GetAddress(string key, int order)
                {
                    return key + ":address" + order.ToString();
                }
            --></example>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            拦截调用
            </summary>
            <param name="input"></param>
            <param name="getNext"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheMethodCallHandler.Order">
            <summary>
            Policy顺序号
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.Cache.KCacheMethodDelegate”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.Cache.KCacheMethodProxy`4">
            <summary>
            方法透明代理
            </summary>
            <typeparam name="K">Key:String</typeparam>
            <typeparam name="V">Value:Object</typeparam>
            <typeparam name="T">Tags:List[string]</typeparam>
            <typeparam name="R">Result:Object</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodProxy`4.Get(System.Func{`0,`3},`0)">
            <summary>
            获取缓存代理
            <example>: string value = (string)KCMger.DMethodProxy.Get((k) => GetProduct("FKEY_0", "abc",110), "FKEY_0");</example>
            </summary>
            <param name="Method"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodProxy`4.Put(System.Func{`0,`3},`0,`1,System.Collections.Generic.List{System.String})">
            <summary>
            写入缓存代理
            <example><!--: Example:KCMger = (IKCacheManager)KCacheManagerFactory.Instance.GetCacheManager("Product");
                   bool ret = (bool)KCMger.DMethodProxy.Put(
                       (k) => (bool)SaveData("MySaveData", dt),
                       "MySaveData",
                      (new List<string>() { "test1", "test" })
                       );--></example>
            </summary>
            <param name="Method"></param>
            <param name="k"></param>
            <param name="v"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheMethodProxy`4.Remove(System.Func{`0,`3},`0)">
            <summary>
            移除缓存代理
            <example>: string value = (string)KCMger.DMethodProxy.Remove((k) => GetProduct("FKEY_0", "abc",110), "FKEY_0");</example>
            </summary>
            <param name="Method"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheSetting">
            <summary>
            Overall configuration settings for Caching
            </summary>    
        </member>
        <member name="T:Kingdee.BOS.Cache.KCacheManagerFactory">
            <summary>
            KCacheManager创建者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.GetAllRegionArea">
            <summary>
            获取所有区域和段名称
            </summary>
            <returns>[[段，区],[...],...]</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.Reset">
            <summary>
            切换Cache的提供者后，必须复位KCacheManager创建者
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.GetCacheManager(System.String,System.String)">
            <summary>
            获得一个IKCacheManager的对象
            </summary>
            <param name="region">隔离带：来自Entity的TypeKey或子系统分类关键字</param>
            <param name="area">隔离区：全局缓存采用帐套ID，局部缓存采用Context.TokenID+帐套ID</param>
            <returns>IKCacheManager对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.KCacheManagerFactory.ClearAllCache">
            <summary>
            清楚系统所有缓存
            注意：是所有数据中心的缓存
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheManagerFactory.LogSwitch">
            <summary>
            log日志开关
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.KCacheManagerFactory.Instance">
            <summary>
            返回KCacheManagerFactory单例
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1">
            <summary>LRUCache is a thread safe cache that automatically removes the items that have not been accessed for a long time.
            an object will never be removed if it has been accessed within the minAge timeSpan, else it will be removed if it
            is older than maxAge or the cache is beyond it's desired size capacity.  A periodic check is made when accessing nodes that determines
            if the cache is out of date, and clears the cache (allowing new objects to be loaded upon next request). </summary>
            
            <remarks>Each Index provides dictionary key / value access to any object in cache, and has the ability to load any object that is
            not found. The Indexes use Weak References allowing objects in index to be garbage collected if no other objects are using them.
            The objects are not directly stored in indexes, rather, indexes hold Nodes which are linked list nodes. The LifespanMgr maintains
            a list of Nodes in each AgeBag which hold the objects and prevents them from being garbage collected.  Any time an object is retrieved 
            through a Index it is marked to belong to the current AgeBag.  When the cache gets too full/old the oldest age bag is emptied moving any 
            nodes that have been touched to the correct AgeBag and removing the rest of the nodes in the bag. Once a node is removed from the 
            LifespanMgr it becomes elegible for garbage collection.  The Node is not removed from the Indexes immediately.  If a Index retrieves the 
            node prior to garbage collection it is reinserted into the current AgeBag's Node list.  If it has already been garbage collected a new  
            object gets loaded.  If the Index size exceeds twice the capacity the index is cleared and rebuilt.  
            
            !!!!! THERE ARE 2 DIFFERENT LOCKS USED BY CACHE - so care is required when altering code or you may introduce deadlocks !!!!!
                   order of lock nesting is LifespanMgr (Monitor) / Index (ReaderWriterLock)
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,Kingdee.BOS.Cache.LRUCache{`0}.IsValid)">
            <summary>Constructor</summary>
            <param name="capacity">the normal item limit for cache (Count may exeed capacity due to minAge)</param>
            <param name="minAge">the minimium time after an access before an item becomes eligible for removal, during this time
            the item is protected and will not be removed from cache even if over capacity</param>
            <param name="maxAge">the max time that an object will sit in the cache without being accessed, before being removed</param>
            <param name="isValid">delegate used to determine if cache is out of date.  Called before index access not more than once per 10 seconds</param>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.GetIndex``1(System.String)">
            <summary>Retrieve a index by name</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.GetValue``1(System.String,``0)">
            <summary>Retrieve a object by index name / key</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.AddIndex``1(System.String,Kingdee.BOS.Cache.LRUCache{`0}.GetKeyFunc{``0},Kingdee.BOS.Cache.LRUCache{`0}.LoadItemFunc{``0})">
            <summary>Add a new index to the cache</summary>
            <typeparam name="KeyType">the type of the key value</typeparam>
            <param name="indexName">the name to be associated with this list</param>
            <param name="getKey">delegate to get key from object</param>
            <param name="loadItem">delegate to load object if it is not found in index</param>
            <returns>the newly created index</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.AddItem(`0)">
            <summary>Add an item to the cache (not needed if accessed by index)</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Add(`0)">
            <summary>Add an item to the cache</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Clear">
            <summary>Remove all items from cache</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.IIndex`1">
            <summary>The public wrapper for a Index</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.IIndex`1.Remove(`1)">
            <summary>Delete object that matches key from cache</summary>
            <param name="key">key to find</param>
        </member>
        <member name="P:Kingdee.BOS.Cache.LRUCache`1.IIndex`1.Item(`1)">
            <summary>Getter for index</summary>
            <param name="key">key to find (or load if needed)</param>
            <returns>the object value associated with the cache</returns>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.IIndex">
            <summary>Because there is no auto inheritance between generic types, this interface is used to send messages to Index objects</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.INode">
            <summary>This interface exposes the public part of a LifespanMgr.Node</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.Index`1">
            <summary>Index provides dictionary key / value access to any object in cache</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.#ctor(Kingdee.BOS.Cache.LRUCache{`0},Kingdee.BOS.Cache.LRUCache{`0}.GetKeyFunc{`1},Kingdee.BOS.Cache.LRUCache{`0}.LoadItemFunc{`1})">
            <summary>constructor</summary>
            <param name="owner">parent of index</param>
            <param name="getKey">delegate to get key from object</param>
            <param name="loadItem">delegate to load object if it is not found in index</param>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.Remove(`1)">
            <summary>Delete object that matches key from cache</summary>
            <param name="key"></param>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.FindItem(`0)">
            <summary>try to find this item in the index and return Node</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.ClearIndex">
            <summary>Remove all items from index</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.AddItem(Kingdee.BOS.Cache.LRUCache{`0}.INode)">
            <summary>Add new item to index</summary>
            <param name="item">item to add</param>
            <returns>was item key previously contained in index</returns>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.Index`1.RebuildIndex">
            <summary>removes all items from index and reloads each item (this gets rid of dead nodes)</summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.Cache.LRUCache`1.Index`1.Item(`1)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.CheckValid">
            <summary>checks to see if cache is still valid and if LifespanMgr needs to do maintenance</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.CleanUp(System.DateTime)">
            <summary>remove old items or items beyond capacity from LifespanMgr allowing them to be garbage collected</summary>
            <remarks>since we do not physically move items when touched we must check items in bag to determine if they should be deleted 
            or moved.  Also items that were removed by setting value to null get removed now.  Rremoving an item from LifespanMgr allows 
            it to be garbage collected.  If removed item is retrieved by index prior to GC then it will be readded to LifespanMgr.</remarks>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Clear">
            <summary>Remove all items from LifespanMgr and reset</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.OpenCurrentBag(System.DateTime,System.Int32)">
            <summary>ready a new current AgeBag for use and close the previous one</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.GetEnumerator">
            <summary>Create item enumerator</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.System#Collections#IEnumerable#GetEnumerator">
            <summary>Create item enumerator</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.AgeBag">
            <summary>container class used to hold nodes added within a descrete timeframe</summary>
        </member>
        <member name="T:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node">
            <summary>LRUNodes is a linked list of items</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.#ctor(Kingdee.BOS.Cache.LRUCache{`0}.LifespanMgr,`0)">
            <summary>constructor</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.Touch">
            <summary>Updates the status of the node to prevent it from being dropped from cache</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.Remove">
            <summary>Removes the object from node, thereby removing it from all indexes and allows it to be garbage collected</summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.LRUCache`1.LifespanMgr.Node.Value">
            <summary>returns the object</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.FindByUserID(System.Int32)">
            <summary>retrieve items by userid</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.FindByUserName(System.String)">
            <summary>retrieve items by username</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.#ctor">
            <summary>constructor creates cache and multiple indexes</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.GetDataRow``1(System.String,System.Object,Kingdee.BOS.Cache.UserCache.LoadData{``0})">
            <summary>This data access is ugly but simple, didn't want to complicate things by including in my db wrapper classes</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.IsDataValid">
            <summary>check to see if users table has changed, if so dump cache and reload.</summary>
            <remarks>If this query doesnt work on your sql2005 server, user privileges are too low</remarks>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.LoadFromUserID(System.Int32)">
            <summary>when FindByUserID can't find a user, this method loads the data from the db</summary>
        </member>
        <member name="M:Kingdee.BOS.Cache.UserCache.LoadFromUserName(System.String)">
            <summary>when FindByUserName can't find a user, this method loads the data from the db</summary>
        </member>
        <member name="P:Kingdee.BOS.Cache.UserCache.Instance">
            <summary>Singleton pattern forces everyone to share the cache</summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeContext">
            <summary>
            计算任务的上下文，为计算执行器提供任务信息和框架操作
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.UpdateProgress(System.Int32)">
            <summary>
            更新进度
            </summary>
            <param name="progress">进度值（必须是一个0-100之间的哦整数）</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.WriteLog(System.String)">
            <summary>
            提交一个计算日志
            </summary>
            <param name="log">提交的日志（日志不能为空）</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeContext.CancelTask">
            <summary>
            取消当前的任务
            <para>
            注意：此方法会抛出一个OperationCanceledException异常并被计算框架捕获。
            如无特殊情况请勿捕获异常
            </para>
            <exception cref="T:System.OperationCanceledException"/>
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeContext.IsCancelled">
            <summary>
            获取当前任务是否被框架标志为取消。
            如果框架将其标志为真，请调用CancelTask
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeContext.Task">
            <summary>
            待计算的任务
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeEnvironment">
            <summary>
            计算框架的运行环境配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeEnvironment.WhiteList">
            <summary>
            数据中心白名单。如果白名单为空，则默认枚举所有数据中心，否则只处理白名单中的数据中心。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputePriority">
            <summary>
            计算优先级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.Normal">
            <summary>
            中优先级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.Immediately">
            <summary>
            立即执行。当一个优先级为Immediately的任务入列后，
            将在当前执行线程池一有空闲的情况下立刻被安排执行
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.High">
            <summary>
            高优先级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputePriority.Low">
            <summary>
            低优先级
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeStatus">
            <summary>
            计算任务的执行状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Ready">
            <summary>
            准备状态。任务排队中，还未执行
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Executing">
            <summary>
            任务正在被执行。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Completed">
            <summary>
            任务已经执行完成
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Cancel">
            <summary>
            任务被取消
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Computing.ComputeStatus.Failure">
            <summary>
            任务执行失败
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.SimpleComputeTask">
            <summary>
            计算任务。本类定义了计算任务的结构
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.SimpleComputeTask.#ctor">
            <summary>
            构造一个计算任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.ComputeId">
            <summary>
            计算任务ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Title">
            <summary>
            任务标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Priority">
            <summary>
            任务优先级
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Status">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.Progress">
            <summary>
            任务进度
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.OriginatorId">
            <summary>
            发起人ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.SimpleComputeTask.ComputeSource">
            <summary>
            计算任务由哪个后台服务机器接收（后续就由哪台机器执行）
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeTask.DeserializeProperties">
            <summary>
            将一些需要被持久化的属性进行内部序列化。此方法通常不需要手工调用
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeTask.SerializeProperties(System.Boolean)">
            <summary>
            将内部被持久化的属性反序列化。此方法通常不需要手工调用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.BOSContext">
            <summary>
            BOS上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.Properties">
            <summary>
            执行属性
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.ExecutorType">
            <summary>
            执行器类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeTask.Logs">
            <summary>
            执行日志
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ComputeLog">
            <summary>
            计算日志。计算任务的执行器可以在执行时根据情况报告日志
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ComputeLog.#ctor(System.String)">
            <summary>
            根据给定的消息构造一条计算日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeLog.OccurTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ComputeLog.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.ContextBag">
            <summary>
            对BOSContext的封装，用以在WCF环境下传递计算框架必要的上下文信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ContextBag.#ctor">
            <summary>
            构造一个空的上下文包。通常不推荐使用此默认构造器。
            请使用ContextBag(Context ctx)构造器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.ContextBag.#ctor(Kingdee.BOS.Context)">
            <summary>
            根据给定的BOS上下文构造一个ContextBag
            </summary>
            <param name="ctx">bOS上下文对象</param>
        </member>
        <member name="M:Kingdee.BOS.Computing.ContextBag.GenerateContext">
            <summary>
            基于当前的上下文包生成上下文
            </summary>
            <returns>生成的BOS上下文</returns>
        </member>
        <member name="P:Kingdee.BOS.Computing.ContextBag.DBId">
            <summary>
            数据库ID（比如：10001）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Computing.ContextBag.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.DemoExecutor">
            <summary>
            这是一个虚拟任务的执行器，
            其主要目的是用来在测试和生产环境中，
            验证计算框架的执行情况。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Computing.IComputeTaskExecutor">
            <summary>
            任务执行器接口
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Computing.DemoExecutor.Execute(Kingdee.BOS.Computing.ComputeContext)">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.AddAndEnableMC(Kingdee.BOS.ManagementCenterElement)">
            <summary>
            注册并启用管理中心
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.EnableMC(System.String)">
            <summary>
            启用管理中心
            </summary>
            <param name="id">元素Id</param>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.DisableMC(System.String)">
            <summary>
            禁用管理中心
            </summary>
            <param name="id">元素Id</param>
        </member>
        <member name="M:Kingdee.BOS.ManagementCenterCollection.GetEnabledMC">
            <summary>
            获取已经启用的管理中心
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.DataCenterID">
            <summary>
            管理中心Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.DatabaseEntity">
            <summary>
            数据库实体名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ManagementCenterElement.Id">
            <summary>
            元素Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.PackageConfigSection.ManagementDatacenters">
            <summary>
            管理中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.PackageConfigSection.MultiLanguageDatacenters">
            <summary>
            多语言中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDConfiguration">
            <summary>
            系统配置，包括包的配置
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.ManagementCenterConfigElement">
            <summary>
            管理中心配置元素
            元素值：mcdc
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDConfiguration.MultiLanguageCenterConfigElement">
            <summary>
            多语言中心配置元素
            元素值：mldc
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.SaveAll">
            <summary>
            保存配置，保存后系统会自动更新
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetDynamicPasswordConfigSection">
            <summary>
            获取认证的提供者
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetCAConfigSection">
            <summary>
            获取CA认证的提供者
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDConfiguration.GetPackageConfigSection(System.Configuration.Configuration)">
            <summary>
            将普通配置节转换为包配置节类型
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.Current">
            <summary>
            当前BOS运行平台配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CommonConfiguration">
            <summary>
            Common.Config配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.PackageConfigurations">
            <summary>
            包配置，依据包配置文件的主名称获取
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsKDYFUpLoadControl">
            <summary>
            是否控制金蝶研发内部附件上传
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowBarIcon">
            <summary>
            是否显示工具栏图标，默认不显示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsShowInnerTitle">
            <summary>
            是否显示副标题，默认显示
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsDeployAsPublicCloud">
            <summary>
            是否以公有云方式部署
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.IsManagementSite">
            <summary>
            是否为管理站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.OracleConnectionStringPattern">
            <summary>
            Oracle连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SqlServerConnectionStringPattern">
            <summary>
            Sql Server 连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SqlServerWindowsConnectionStringPattern">
            <summary>
            Sql Server Windows连接串模板
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SPVersionNum">
            <summary>
            SP的版本号，初始值为0，打上SP1后改为1，以此类推
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.ManagementSiteUrl">
            <summary>
            管理站点Url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.CurrentSiteUrl">
            <summary>
            当前站点的Url
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.XunTongOpenSysServiceRootUrl">
            <summary>
            讯通OpenSys服务接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.XunTongMCloudServiceRootUrl">
            <summary>
            讯通mcloud服务接口地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.SyncProductModelTime">
            <summary>
            业务站点定时与管理站点同步产品模型，默认5分钟
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDConfiguration.BillCountPerExportFile">
            <summary>
            引出时，每个文件容纳的最大单据数目
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Context">
            <summary>
            登录上下文环境
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.ci">
            <summary>
            当前用户语言信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.AreaCacheKey">
            <summary>
            缓存隔离key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.CharacterSet">
            <summary>
            字符集（oracle与sqlserver字符集实现不一样，这里引用sqlserver字符集，oracle需做映射关系，并且需要KSQL支持）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DefaultLocale">
            <summary>
            系统默认语言
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.logLocale">
            <summary>
            日志等使用语言:理论上应该和操作系统CultureInfo一致
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Context.#ctor">
            <summary>
            debug使用
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Context.GetAreaCacheKey">
            <summary>
            获得缓存隔离key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Context.GetQueryDBContext">
            <summary>
            获得查询数据库上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Context.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            请务必注意，此处存在版本问题，您加的属性在以前系列化本对象后不存在的，
            故info.GetValue这样获取很可能会报错，请先判断变量是否存在再使用；
            </summary>
            <param name="info"></param>
            <param name="cntxt"></param>
        </member>
        <member name="P:Kingdee.BOS.Context.DatabaseCategory">
            <summary>
            //数据库类型  登录时设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ContextId">
            <summary>
            上下文ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.WeiboAuthInfo">
            <summary>
            微博AuthInfo
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.Region">
            <summary>
            用户或当前业务的区域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsStartTimeZoneTransfer">
            <summary>
            是否启用时区转换
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LoginName">
            <summary>
            登录时输入的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserName">
            <summary>
            当前Context对应的用户名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.Salt">
            <summary>
            密码调料
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserId">
            <summary>
            当前Context对应的用户ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserToken">
            <summary>
            用户认证令牌
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserPhone">
            <summary>
            用户手机
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserAuthenticationMethod">
            <summary>
            用户认证方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserLoginType">
            <summary>
            用户登录类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserX509Certificate">
            <summary>
            用户的CA证书
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DatabaseType">
            <summary>
            数据库类型属性,登录时设置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.TransIsolationLevel">
            <summary>
            事务隔离级别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ServerUrl">
            <summary>
            应用服务器地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ConsoleFormId">
            <summary>
            主控表单唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ConsolePageId">
            <summary>
            主控页面标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UserTransactionId">
            <summary>
            用户事务ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.TenantId">
            <summary>
            租户标识；
            公有云使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IpAddress">
            <summary>
            登陆ip
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ComputerName">
            <summary>
            登陆电脑名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CreateContextGuid">
            <summary>
            该属性提供context创建时候的一个唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.QueryDBId">
            <summary>
            关联的查询库数据中心
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CurrentOrganizationInfo">
            <summary>
            当前组织信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.CurrentUserTimeZone">
            <summary>
            当前用户时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SystemTimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.DBId">
            <summary>
            //数据库ID（帐套管理唯一标识）====由于目前为空值,此处设置为K3Makalu，主要为缓存测试使用 by eckel
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.LogLocale">
            <summary>
            注意，获取用户国际化信息使用UserLocale，
            本属性可能为NULL，只用于记录日志用；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsMultiOrg">
            <summary>
            是否启用多组织
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UseLanguages">
            <summary>
            系统中用户数据语言
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.UseLanguageIds">
            <summary>
            用户数据语言(如多语言字段)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.IsCH_ZH_AutoTrans">
            <summary>
            是否简繁自动转换
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SysLanguages">
            <summary>
            系统中语言总类别(设置为登录语言的语言)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.SysLanguageIds">
            <summary>
            系统中语言ID(如多语言字段)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.NetCtrlMonitorIDForDataCenterM">
            <summary>
            数据中心独占监控信息ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Context.ServiceType">
            <summary>
            服务端类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.Normal">
            <summary>
            正常业务数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.Archive">
            <summary>
            归档数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.Report">
            <summary>
            报表数据库(只读)
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.ManagementCenter">
            <summary>
            管理中心数据库
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Context.DataBaseCategory.MultiLanguageCenter">
            <summary>
            多语言中心数据库
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ClientType">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ClientType.Mobile">
            <summary>
            移动终端
            </summary>
        </member>
        <member name="T:Kingdee.BOS.WebType">
            <summary>
            服务端类型
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ContextConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写上下文Json数据
            </summary>
            <remarks>
            1、本次修改删除了操作编码属性
            </remarks>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.RaiseEventSources">
            <summary>
            觸發此次操作的源
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.DataEntities">
            <summary>
            實際影響的實體集合。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.ActionExecuteContext`6.RaiseEventTypeFlag">
            <summary>
            返回一個位枚舉，他搜集了所有的觸發源，然後將對應的位標注為true.
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6">
            <summary>
            规则容器，通过分析规则依赖的字段，在字段或集合改变时正确调度规则。
            </summary>
            <typeparam name="T">Table類型</typeparam>
            <typeparam name="F">Field類型</typeparam>
            <typeparam name="R">Relation類型</typeparam>
            <typeparam name="L">Rule類型</typeparam>
            <typeparam name="S">RaiseEventSource類型</typeparam>
            <typeparam name="C">ActionExecuteContext類型</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.WalkItems(Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection,`0,Kingdee.BOS.Core.DependencyRules.RaiseEventType,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            將指定的數據全部更新，包括子實體，這發生在Initialized和ItemAdded,ItemReset
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.MapingRulesDataEntites(Kingdee.BOS.Core.DependencyRules.RaiseEventType,System.Collections.Generic.IEnumerable{`3},`0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            根据事件源信息，推导出哪些规则以及对应的目标数据集需要执行。
            </summary>
            <param name="raiseEventType">触发的事件类型，用于提前过滤规则，减少不必要的计算。</param>
            <param name="rules">可能被执行的规则集合。</param>
            <param name="eventTable">发生事件的事件源。</param>
            <param name="eventDataEntities">事件发生时的实体。</param>
            <returns>一个数据结构，存放了规则和目标数据集合的关系。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.CanShip``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            根据实体级的数据，判断是否可以跳过运算。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetDataEntities(`0,`0,System.Collections.Generic.IEnumerable{System.Object},Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode@)">
            <summary>
            通過事件源于規則申明的位置，獲取與事件源實體相關的實體集合。
            </summary>
            <param name="activeTable">当前活动表，例如在规则中是事件觸發時的表</param>
            <param name="targetTable">目标表，在规则中，即規則申明的位置，</param>
            <param name="activeDataEntities">当前活动数据集，在规则中，即事件源的實體集合。</param>
            <param name="expansionMode">最终展开后，数据的来源方向。</param>
            <returns>最終與申明源相關的實體集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetItems(`2,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            已知一個關係，以及父表的對象集合，返回這個關係對應的所有明細。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.#ctor">
            <summary>
            创建规则容器。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetTables">
            <summary>
            返回所有的表对象。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetRuleComparison">
            <summary>
            返回规则的排序委托，用于决定规则的执行顺序。
            </summary>
            <returns>规则的排序委托，默认为null，即不排序。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Build">
            <summary>
            在首次使用前，必须调用此方法，由于分析依赖关系。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetFieldDependencyRules(`1)">
            <summary>
            获取某个字段关联的所有规则。
            </summary>
            <param name="field">要检测的字段</param>
            <returns>与之关联的规则集合，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetTableDependencyRules(`0)">
            <summary>
            获取某个表关联的所有规则。
            </summary>
            <param name="table">要检测的表</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetRelationDependencyRules(`2)">
            <summary>
            获取某个关系关联的所有规则。
            </summary>
            <param name="relation">要检测的关系</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Raise(`4,`5)">
            <summary>
            触发指定的事件
            </summary>
            <param name="arg">事件参数</param>
            <param name="executeContext">执行上下文</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnItemRemoved(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            当某个明细被删除后。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnInitialized(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            當整單在加載后觸發。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.OnValueChanged(`4,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.TaskCollection)">
            <summary>
            當一個字段的值發生改變后調用此函數
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Suspend">
            <summary>
            通知规则引擎进入休眠状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Resume(`5)">
            <summary>
            唤醒规则引擎
            </summary>
            <param name="executeContext">需要外界自己组织一个执行上下文。</param>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.Rules">
            <summary>
            返回所有的規則集合。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RootTable">
            <summary>
            返回根表對象
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.IsSuspend">
            <summary>
            是否处于休眠状态
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager">
            <summary>
            用于管理依赖性的工具类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager._fieldDependencyRules">
            <summary>字段关联的规则</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager._tableDependencyRules">
            <summary>表关联的规则。</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager._relationDependencyRules">
            <summary>关系关联的规则。</summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.Build">
            <summary>
            構建數據的依赖性。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyRules(`1)">
            <summary>
            尋找所有依賴某個字段的所有規則。
            </summary>
            <param name="field">要檢索的字段</param>
            <returns>返回所有依賴此字段的規則。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDeclarationRules(`0)">
            <summary>
            返回在某个表上申明的所有规则。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyFields">
            <summary>
            獲取所有有依賴需求的字段。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyRules(`0)">
            <summary>
            返回依賴與某個表的所有規則。
            </summary>
            <param name="table">要檢索的表，他要求字段已經提前計算依賴項。</param>
            <returns>未合併過濾后的規則。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetDependencyRules(`2)">
            <summary>
            返回依赖某个关系的所有规则。
            </summary>
            <param name="relation">要检测的关系。不能为空</param>
            <returns>依赖此关系的规则集合。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetFieldDependencyRules(`1)">
            <summary>
            获取某个字段关联的所有规则。
            </summary>
            <param name="field">要检测的字段</param>
            <returns>与之关联的规则集合，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetTableDependencyRules(`0)">
            <summary>
            获取某个表关联的所有规则。
            </summary>
            <param name="table">要检测的表</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.DependencyManager.GetRelationDependencyRules(`2)">
            <summary>
            获取某个关系关联的所有规则。
            </summary>
            <param name="relation">要检测的关系</param>
            <returns>与之关联的规则数组，可能为null</returns>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.LazyCollectionBase`2">
            <summary>
            将源序列转换为目标序列的集合类。
            </summary>
            <typeparam name="S">源序列的元素类型</typeparam>
            <typeparam name="T">目标序列的元素类型。</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.LazyCollectionBase`2.Convert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            派生类完成源序列到目标序列的转换工作。
            </summary>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.LazyCollectionBase`2.TargetObjects">
            <summary>
            返回目標數據。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.GetItemsByRelation">
            <summary>
            通过关系寻找明细，本来可以使用匿名函数非常方便的处理，但是C#编译系统有BUG，只能手工编写类。
            关于此BUG可以参见 http://www.cnblogs.com/tansm/archive/2011/05/20/2051684.html
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RuleDataEntities">
            <summary>
            一个数据结构，存放了规则和目标数据集合的关系。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RuleDataEntities.Rule">
            <summary>
            一批规则，这些规则需要被执行。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.RuleDataEntities.DataEntities">
            <summary>
            目标数据集，Rule将应用到这些目标数据集上。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection">
            <summary>
            定义了一个集合，这个集合有个特点，允许ForEach的同时，再添加数据。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.AddRaiseEventSource(`4)">
            <summary>
            向集合中添加触发的事件源。
            </summary>
            <param name="eventSource">一个事件源对象。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.AddRange(System.Collections.Generic.IEnumerable{Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.RuleDataEntities})">
            <summary>
            添加一批新的待执行任务。这些任务会自动与当前的任务合并。
            </summary>
            <param name="newTasks">新的任务。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.TryGetTask(`3,Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.RuleDataEntities@)">
            <summary>
            从当前可用集合中检索是否有指定的规则。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.Dequeue(Kingdee.BOS.Core.DependencyRules.RuleContainer{`0,`1,`2,`3,`4,`5}.RuleDataEntities@)">
            <summary>
            弹出一个最前面的元素（规则+数据），并删除这个元素。
            </summary>
            <param name="result">当前集合中最前面的元素。</param>
            <returns>是否仍然有数据。</returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.RaiseEventSources">
            <summary>
            返回只读方式的所有触发源。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RuleContainer`6.TaskCollection.Count">
            <summary>
            返回当前剩余的未执行的规则数目。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode">
            <summary>
            当进行数据展开时的模式，他作为GetDataEntities的返回值。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode.Peer">
            <summary>目标数据在平级的层，即当前表</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode.Parent">
            <summary>目标数据在父表</summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.DataRowExpansionMode.Items">
            <summary>目标数据在他的子表</summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Field`4.Table">
            <summary>
            此字段所在的表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.LazyCollection`2">
            <summary>
            已知一個集合，通過一個運算可以
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Field">
            <summary>
            返回觸發此次事件的源字段
            </summary>
            <remarks>例如當物料發生改變時，此字段就是物料，但如果是分錄刪除、新增和清除時，此字段就是關係的字段。當單據加載時，此處也為空。</remarks>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.DataEntity">
            <summary>
            返回觸發此次事件的參考實體
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.RaiseEventType">
            <summary>
            返回造成此次改變的類型，例如是值更新事件。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.RaiseEventSource`6.Relation">
            <summary>
            返回發生此次事件相關的關係，這發生在集合變更時使用。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.RaiseEventType">
            <summary>
            觸發事件的類型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ValueChanged">
            <summary>
            當某個字段的值更新后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.Initialized">
            <summary>
            當初始化整個表單后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemAdded">
            <summary>
            當某個分錄添加后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemReset">
            <summary>
            當某個分錄重置后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemRemoved">
            <summary>
            當某個分錄被刪除后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.Reset">
            <summary>
            當某個分錄重新更新數據或全部刪除后
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.SelectRowChanged">
            <summary>
            選擇的行發生改變時，這一般發生在單據體具有代理字段的情況下。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Core.DependencyRules.RaiseEventType.ItemAdding">
            <summary>
            當某個分錄正在添加中
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Core.DependencyRules.Relation`4">
            <summary>
            关系,用于描述两个表之间的父子关系。
            </summary>
            <typeparam name="T">Table類型</typeparam>
            <typeparam name="F">Field類型</typeparam>
            <typeparam name="R">Relation類型</typeparam>
            <typeparam name="L">Rule類型</typeparam>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Relation`4.GetItems(System.Object)">
            <summary>
            通过此关系，获取某个父表数据的所有子数据。
            </summary>
            <param name="dataEntity">父表的一条有效记录。</param>
            <returns>返回此父记录的所有明细记录。</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Relation`4.GetParent(System.Object)">
            <summary>
            返回某个子表记录的父对象。
            </summary>
            <param name="dataEntity">子表的某条记录。</param>
            <returns>子表的某条记录。</returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Relation`4.ParentTable">
            <summary>
            返回此关系中的父表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Relation`4.ChildTable">
            <summary>
            返回此关系中的子表。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Rule`6.DependencyIt(`1)">
            <summary>
            檢測此規則是否依賴某個字段。
            </summary>
            <param name="field">要檢測的字段</param>
            <returns>如果依賴此字段，返回true，否則返回false.</returns>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Rule`6.Execute(`5)">
            <summary>
            此規則觸發時，應執行的囘調操作。
            </summary>
            <param name="context">執行上下文。</param>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Rule`6.QueryExecute(Kingdee.BOS.Core.DependencyRules.RaiseEventType)">
            <summary>
            返回一個值，此值指示否則在某個觸發情況下執行此規則。
            </summary>
            <param name="raiseEventType">當前可能的觸發情況，是一個位枚舉，某個位為true時，表示可能觸發此事件。</param>
            <returns>返回在上述情況下，是否觸發規則的執行。</returns>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Rule`6.DeclarationSource">
            <summary>
            此規則申明的位置，例如申明到表頭或單據體
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Rule`6.DependencyFields">
            <summary>
            此規則依賴的字段集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Rule`6.DependencyRelations">
            <summary>
            返回規則依賴的關係集合。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Core.DependencyRules.Table`4.CompareTo(Kingdee.BOS.Core.DependencyRules.Table{`0,`1,`2,`3})">
            <summary>
            计算例外一个表与当前表的大小，
            如果当前表低于other的层次，例如this是主表，other是分录，返回小于0的值；
            如果当前表与other是一个层次，例如this是分录，other也是分录，返回0,注意，两个平级的分录也返回0;
            如果当前表低于other的层次，那么返回大于0的值；
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.Fields">
            <summary>
            返回此表所有的字段
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.ParentRelation">
            <summary>
            返回此表的父關係，當為null時
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.ChildRelations">
            <summary>
            返回此表所在的子關係
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Core.DependencyRules.Table`4.Level">
            <summary>
            此表所在的級別，當時根表時為0，他的子表為1（並行的都為1），以此類推。
            此值在BusinessInfo的具体实现中填充。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DatabaseType">
            <summary>
            数据库类型定义
            <seealso cref="!:Kingdee.BOS.SQL.DatabaseType"/> 
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterType">
            <summary>
            数据中心类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.ManagementCenter">
            <summary>
            管理中心
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.BusinessDataCenter">
            <summary>
            业务数据中心
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterType.MultiLanguageCenter">
            <summary>
            多语言中心
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DBScriptListAccountType">
            <summary>
            脚本执行列表中注册的脚本分组类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.PDM">
            <summary>
            PDM中Table、View脚本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.BOS">
            <summary>
            BOS运行平台所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.MC">
            <summary>
            管理中心所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.BusinessDataCenter">
            <summary>
            标准业务数据中心所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.ML">
            <summary>
            多语言中心所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.DEV">
            <summary>
            开发类型的帐套所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.DEMO">
            <summary>
            DEMO类型的帐套所需数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DBScriptListAccountType.PDM_Constraint">
            <summary>
            PDM中的Constraint脚本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.K3ProductInfo">
            <summary>
            K3产品信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.K3ProductInfo.CurrentK3ProductVersion">
            <summary>
            当前产品版本信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.K3ProductInfo.K3ProductBeginVersion">
            <summary>
            产品初始版本信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.FullDatabaseBackups">
            <summary>
            完整数据库备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.PartialBackups">
            <summary>
            增量数据库备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataBaseBackupType.BookBackups">
            <summary>
            账簿备份
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ParseMetaDataFileType">
            <summary>
            元数据文件解析类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.ALL">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.BusinessObjectMetaData">
             <summary>
            业务对象元数据
             </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.BusinessObjectDependencyItem">
            <summary>
            业务对象依赖项
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.BusinessObjectMetaDataAndGatherDependencyItem">
            <summary>
            业务对象元素据，同时收集依赖项元数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.ParseMetaDataFileType.ExecuteAndClearDependencyItem">
            <summary>
            执行并清理依赖项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DatabaseBusinessType">
            <summary>
            数据库业务类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterID">
            <summary>
            数据中心ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterNumber">
            <summary>
            数据中心编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterName">
            <summary>
            数据中心名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DataCenterType">
            <summary>
            数据中心类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.AcctType">
            <summary>
            帐套类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.SysTimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.OperationType">
            <summary>
            数据中心操作类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.ServerInstance">
            <summary>
            服务器实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.LogFileFullPath">
            <summary>
            数据中心脚本日志全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.ScriptLogContent">
            <summary>
            数据中心脚本执行日志
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DBBackupFileName">
            <summary>
            数据中心备份时，所选择的备份后的文件名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.DBBackupFilePath">
            <summary>
            数据中心备份时，所选择的备份后的文件路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.RunTask">
            <summary>
            允许执行计划任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.TenantId">
            <summary>
            数据中心租户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IDataCenterInfo.Sites">
            <summary>
            数据中心应映射站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IUpgradeDataCenter.CurrentProductVersion">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IUpgradeDataCenter.TargetProductVersion">
            <summary>
            目标版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IBackupDataCenter.BackupDateTime">
            <summary>
            备份日期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IBackupDataCenter.BackupType">
            <summary>
            备份类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.IRestoreDataCenter.DBRestoreFileFullPath">
            <summary>
            数据中心恢复时，所选择的备份文件的全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBAUser">
            <summary>
            DBA用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBAPassword">
            <summary>
            DBA密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.User">
            <summary>
            数据库连接用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.Password">
            <summary>
            数据库连接用户密码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterID">
            <summary>
            数据中心ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterNumber">
            <summary>
            数据中心编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterName">
            <summary>
            数据中心名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DataCenterType">
            <summary>
            数据中心类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.AcctType">
            <summary>
            帐套类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.SysTimeZone">
            <summary>
            系统时区
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.OperationType">
            <summary>
            数据中心操作类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.ServerInstance">
            <summary>
            服务器实例
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.IsCreateNewUser">
            <summary>
            是否创建新用户
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DatabaseBusinessType">
            <summary>
            数据库业务类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.RunTask">
            <summary>
            允许执行计划任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.TenantId">
            <summary>
            数据中心租户Id
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.Sites">
            <summary>
            数据中心映射站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.CurrentProductVersion">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.TargetProductVersion">
            <summary>
            目标版本
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.BackupDateTime">
            <summary>
            备份日期
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBBackupFileName">
            <summary>
            数据中心备份时，所选择的备份后的文件名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBBackupFilePath">
            <summary>
            数据中心备份时，所选择的备份后的文件路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.BackupType">
            <summary>
            备份类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo.DBRestoreFileFullPath">
            <summary>
            数据中心恢复时，所选择的备份文件的全路径
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DataCenter">
            <summary>
            数据中心基础类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataCenterInfo.DataCenter.ToString">
            <summary>
            转化为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.AcctType">
            <summary>
            账套类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.IsNeedValicationCode">
            <summary>
            是否需要验证码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.AuthenticationMethods">
            <summary>
            数据中心验证方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.RunTask">
            <summary>
            允许执行计划任务
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DataCenter.Sites">
            <summary>
            关联的站点
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.DCRefSiteInfo">
            <summary>
            数据中心关联的站点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCRefSiteInfo.Id">
            <summary>
            站点ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.DCRefSiteInfo.DisplayName">
            <summary>
            站点显示名称
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Upgrade">
            <summary>
            升级
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Backup">
            <summary>
            备份
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Restore">
            <summary>
            恢复
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Regist">
            <summary>
            注册
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Modify">
             <summary>
            修改
             </summary>
        </member>
        <member name="F:Kingdee.BOS.DataCenterInfo.DataCenterOperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.OracleDataCenterInfo.IsCreateNewTableSpace">
            <summary>
            是否创建新的表空间  
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataCenterInfo.OracleTableSpace">
            <summary>
            Oracle表空间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.DatabaseEntity">
            <summary>
            数据库实体名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.DBFileFullPath">
            <summary>
            数据库实体文件存储全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.DBFileLogFullPath">
            <summary>
            数据库实体日志文件存储全路径
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataCenterInfo.SqlServerDataCenterInfo.IsWindiwsUser">
            <summary>
            是否使用Windows身份验证方式
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDChartInfo">
            <summary>
            抽出图表信息类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Outsetbar">
            <summary>
            Outset Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Gradientbar">
            <summary>
            Gradient Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Borderlessbar">
            <summary>
            Gradient Borderless Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Simplebar">
            <summary>
            Simple Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Borderlesssimplebar">
            <summary>
            Borderless Simple Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Flatbar">
            <summary>
            Flat Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Flatglassbar">
            <summary>
            Flat Glass Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Steelcolumn">
            <summary>
            Steel Column
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Transparentbar">
            <summary>
            Transparent Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Quasibar">
            <summary>
            Quasi-3D Bar
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDChartBar2DModelName.Glasscylinder">
            <summary>
            Glass Cylinder
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.NumPerPage">
            <summary>
            依据SecondScaleType属性的设置，确定该NumPerPage值的单位。50以内，避免性能太慢。
            单位为：Day，Hour，Minute，Second，其他的Scale都归结到Day
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.IsCurrentTimeLineVisible">
            <summary>
            是否显示当前时间线
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.IsNonworkingTimeHighlighted">
            <summary>
            是否非工作时间高亮显示
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.NonworkingTimeBackground">
            <summary>
            非工作时间背景颜色
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingWeekStart">
            <summary>
            每周开始工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingWeekEnd">
            <summary>
            每周结束工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingDayStart">
            <summary>
            每日开始工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.WorkingDayEnd">
            <summary>
            每日结束工作时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.StartTime">
            <summary>
            任务图开始时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.EndTime">
            <summary>
            任务图结束时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.FirstScaleType">
            <summary>
            第一时间单位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.SecondScaleType">
            <summary>
            第二时间单位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDGanttChartParameter.Intervals">
            <summary>
            非工作时间列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.GetStrategyKey">
            <summary>
            get the strategy key from this parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.RaisePropertyChanged(System.String)">
            <summary>
            触发属性改变事件
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDGanttChartParameter.GetKDScaleType(System.Int32)">
            <summary>
            获取时间单位类型
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDTimeInterval.WorkingType">
            <summary>
            Is break time
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDTimeInterval.IntervalType">
            <summary>
            type of time slot
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDRichEditAttachementInfo">
            <summary>
            富文本附件类
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo">
            <summary>
            富文本编辑绑定数据源字段定义类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo.FieldInitialValue">
            <summary>
            默认初始值，用于记录初始默认值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo.FieldOldValue">
            <summary>
            记录改变前的值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDRichEditMergeFieldCollection.Add(Kingdee.BOS.DataEntity.KDRichEditMergeFieldInfo)">
            <summary>
            隐藏List类中add方法，重新定义Add方法,判断有重复列的时候报出异常
            </summary>
            <param name="dc"></param>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDSerialPort">
            <summary>
            金蝶串口类，2013-09-24，yaojunsong
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.Init(Kingdee.BOS.DataEntity.KDSerialPortConfig)">
            <summary>
            端口初始化
            </summary>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.Close">
            <summary>
            关闭当前端口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.WriteLine(System.String)">
            <summary>
            端口写入字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            端口写入Byte数组
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            端口写入Char数组
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPort.GetErrMessage">
            <summary>
            获取错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.KDSerialPort.AfterReceived">
            <summary>
            数据到达回调接口
            </summary>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDSerialPortConfig">
            <summary>
            金蝶串口配置类，2013-09-24，yaojunsong
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.PortName">
            <summary>
            端口名称，如COM2，COM4
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Rate">
            <summary>
            端口速率，一般是2400，4800，9600等
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Parity">
            <summary>
            //0,不校验;1,奇数;2,偶数;3,保留为 1;4,保留为 0;
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Bits">
            <summary>
            //比特位，一般是8;
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.StopBits">
            <summary>
            停止位的数目 0,不使用停止位;1,使用一个停止位;2,使用两个停止位;3,使用 1.5 个停止位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.Timeout">
            <summary>
            操作未完成时发生超时之前的毫秒数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPortConfig.GetTimeout">
            <summary>
            获取超时时间，默认为-1永不超时
            </summary>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.DataEntity.KDSerialPortConfig.EncodingName">
            <summary>
            ASCIIEncoding、UTF8Encoding、UTF32Encoding、UnicodeEncoding、Windows 单字节编码之一或 Windows 双字节编码之一。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.DataEntity.KDSerialPortConfig.GetEncoding">
            <summary>
            依据EncodingName获取编码，默认为ASCII
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.DataEntity.KDSerialPortEventArgs">
            <summary>
            串口数据接受事件事件
            </summary>
        </member>
        <!-- 对于成员“P:Kingdee.BOS.DataEntity.KDSerialPortEventArgs.ReceivedDataType”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.DataEntity.MsgInnerInfo">
            <summary>
            消息提示中控件实体
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.key">
            <summary>
            点击事件key
            </summary>
        </member>
        <member name="P:Kingdee.BOS.DataEntity.MsgInnerInfo.caption">
            <summary>
            显示caption
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDZipLib">
            <summary>
            基于zlib 1.1.3的.net版本，目前来看是够用的
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.Zip(System.Byte[])">
            <summary>
            对数据进行压缩
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.CheckHasZip(System.Byte[])">
            <summary>
            判断是否用Zlib压缩过
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.UnZip(System.Byte[])">
            <summary>
            数据解压缩
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.ZipText(System.Byte[])">
            <summary>
            将数据压缩为Base64编码的文本
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDZipLib.UnZipText(System.String)">
            <summary>
            将数据从Base64文本进行解压缩
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.CompressLevel">
            <summary>
            Zlib 压缩类型枚举
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.Default">
            <summary>
            The default compression level with a reasonable compromise between compression and speed
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.None">
            <summary>
            No compression at all. The data are passed straight through.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.Best">
            <summary>
            The maximum compression rate available.
            </summary>
        </member>
        <member name="F:Kingdee.BOS.CompressLevel.Fastest">
            <summary>
            The fastest available compression level.
            </summary>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:Kingdee.BOS.KDBusinessException">
            <summary>
            业务异常,使用此类异常,则不抛出明细信息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDException">
            <summary>
            K/3异常信息基类。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDException.#ctor(System.String,System.String)">
            <summary>
            K/3异常信息基类。
            </summary>
            <param name="Code">错误代码</param>
            <param name="Message">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDException.Code">
            <summary>
            错误编号
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDException.Date">
            <summary>
            错误发生时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDCancelException">
            <summary>
            KD系统内部使用的取消异常定义
            </summary>
            <remarks>
            取消异常定义：
            内部某一类异常，可以固定异常代码（也许命名不一定合适），但对异常代码统一控制很有必要（对用户调用透明）
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.KDCancelException.#ctor(System.String)">
            <summary>
            创建取消异常实例
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionLicense">
            <summary>
            许可加密的错误类型
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDSyntaxErrorException">
            <summary>
            公式语法校验异常类，yaojunsong,2011-10-08
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionContext">
            <summary>
            表达式执行所需上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.Set(System.String,System.Object)">
            <summary>
            定义一个表达式执行期所需的变量并赋值
            （此方法通常用来定义表达式执行所需的变量参数）
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            ctx.Set("name", "john").Set("age", "21")等等
            </para>
            </summary>
            <param name="key">变量名称</param>
            <param name="value">变量值</param>
            <returns>
            出于Fluent编程考虑而加入的快速接口，例如：
            <para>ctx.Set("name", "john").Set("age", "21")</para>
            </returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.Set(System.String)">
            <summary>
            定义一个表达式执行期所需的变量
            （此方法通常用来定义期望从脚本中获取值的变量）
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            ctx.Set("result1").Set("result2")等等
            </para>
            </summary>
            <param name="key">变量名称</param>
            <returns>为Fluent编程而加入的快速接口</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.TrySetValue(System.String,System.Object)">
            <summary>
            尝试进行赋值操作。将检测是否能够进行字段和变量赋值
            </summary>
            <param name="key">要赋值的键</param>
            <param name="newValue">新的值</param>
            <returns>是否赋值成功。</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.TryGetValue(System.String,System.Object@)">
            <summary>
            获取给定变量名或字段的值，将尝试从字段和变量中。
            </summary>
            <param name="key">变量名</param>
            <param name="value">如果获取成功，返回其值，否则为null</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionContext.BindGetField(Kingdee.BOS.Scripting.TryGetValueHandler)">
            <summary>
            设置表达式中字段的取值方法。
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            ctx.SetFieldEvaluator(GetFieldFromModel).Set("age", "21")等等
            </para>
            </summary>
            <param name="handler">取值方法体的委托</param>
        </member>
        <member name="P:Kingdee.BOS.Scripting.ExpressionContext.VariableDictionary">
            <summary>
            返回变量字典。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.ExpressionContext.VariableNames">
            <summary>
            获取所有变量名称的集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaContext.RegisterFunctions(System.String,Kingdee.BOS.Formula.IFormulaFunction)">
            <summary>
            注册自定义函数
            </summary>
            <param name="key"></param>
            <param name="funcMeta"></param>
        </member>
        <member name="P:Kingdee.BOS.Formula.FormulaContext.CustomParams">
            <summary>
            运行时客户化参数结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.AbstractFormulaFunction">
            <summary>
            公式函数抽象类,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.IFormulaFunction">
            <summary>
            函数接口 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaFunction.GetFunction(System.String)">
            <summary>
            函数代理接口
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaFunction.GetCacheKey(System.String)">
            <summary>
            获取缓存键值
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Category">
            <summary>
            函数类别
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.FunctionName">
            <summary>
            函数名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Assembly">
            <summary>
            组件
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Contex">
            <summary>
            运行时上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunction.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaFunction.GetFunction(System.String)">
            <summary>
            获取函数调用句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaFunction.GetCacheKey(System.String)">
            <summary>
            获取缓存键值，空字符串则不缓存。
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaFunction.CreateNewInstance">
            <summary>
            创建新实例,如果确认为无状态类，可以直接 return this。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Category">
            <summary>
            函数分类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.FunctionName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Assembly">
            <summary>
            组件格式：TypeName,AssembleName
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Contex">
            <summary>
            运行时上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaFunction.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.AbstractFormulaParserProvider">
            <summary>
            公式解析提供者抽象基类 ,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.IFormulaParserProvider">
            <summary>
            公式解析提供者接口 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetItems(System.Func{System.Collections.Generic.List{System.String}})">
            <summary>
            取的计算项和依赖项列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetItemsValue(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            公式运行时取公式依赖项的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetPrivateVars(System.Func{System.Collections.Generic.List{System.String}})">
            <summary>
            取得公式内部临时变量列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetPrivateVarsValue(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            公式运行时取公式临时变量的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetFunctions(System.Func{Kingdee.BOS.Formula.IFormulaParserProvider,System.Collections.Generic.Dictionary{System.String,Kingdee.BOS.Formula.IFormulaFunction}})">
            <summary>
            取得公式内部使用的函数表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindSetField(System.Action{System.String,System.Object})">
            <summary>
            设置值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.BindGetField(System.Func{System.String,System.Object})">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.GetFormulaText(System.Collections.Generic.IList{Kingdee.BOS.Formula.KDExpressionDataItem})">
            <summary>
            获取公式Script
            </summary>
            <param name="formulaStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.Check(System.String)">
            <summary>
            公式检查
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.GetDependenceItems(System.String)">
            <summary>
            获取依赖项
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.GetDependenceFunctions(System.String)">
            <summary>
            获取依赖的函数列表
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IFormulaParserProvider.Excute(System.String)">
            <summary>
            公式执行
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Formula.AbstractFormulaParserProvider.FunctionRegex">
            <summary>
            函数匹配
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Formula.AbstractFormulaParserProvider.DepItemReg">
            <summary>
            依赖项匹配
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Formula.AbstractFormulaParserProvider.NumberReg">
            <summary>
            数字匹配
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.InitContext">
            <summary>
            初始化上下文
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.SetFieldValue(System.String,System.Object)">
            <summary>
            设置运算结果
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetFieldValue(System.String)">
            <summary>
            获取变量值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetItems">
            <summary>
            取的计算项和依赖项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetItemsValue">
            <summary>
            公式运行时取公式依赖项的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetPrivateVars">
            <summary>
            取得公式内部临时变量列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetPrivateVarsValue">
            <summary>
            公式运行时取公式临时变量的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetFunctions">
            <summary>
            取得公式内部使用的函数表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetFormulaText(System.Collections.Generic.IList{Kingdee.BOS.Formula.KDExpressionDataItem})">
            <summary>
            获取公式Script
            </summary>
            <param name="formulaStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.Check(System.String)">
            <summary>
            公式检查
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.GetDependenceFunctions(System.String)">
            <summary>
            获取依赖的函数列表
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.AbstractFormulaParserProvider.Excute(System.String)">
            <summary>
            公式执行
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaParserProvider.CalcResult">
            <summary>
            运算结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaParserProvider.CustomParams">
            <summary>
            运行时客户化参数
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.AbstractFormulaParserProvider.Context">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.ENUM_FUNCTYPE">
            <summary>
            函数类型枚举,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.FormulaUtils">
            <summary>
            公式解析类,yaojunsong,2011-8-22
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.ParserXmlFormlaDisplay(System.String)">
            <summary>
            构造xml公式模型
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.ParserXmlFormalItem(System.Xml.Linq.XElement)">
            <summary>
            构造xml公式模型节点
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.Check(System.String,Kingdee.BOS.Formula.IFormulaParserProvider)">
            <summary>
            校验公式
            </summary>
            <param name="xml"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.Excute(Kingdee.BOS.Context,System.String,Kingdee.BOS.Formula.IFormulaParserProvider)">
            <summary>
            执行公式
            </summary>
            <param name="ctx"></param>
            <param name="xml"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetFormulaText(System.String,Kingdee.BOS.Formula.IFormulaParserProvider)">
            <summary>
            获取公式文本
            </summary>
            <param name="xml"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetProvider(System.String)">
            <summary>
            获取公式解析引擎提供者
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.Formula.FormulaUtils._selfCreateLib">
            <summary>
            函数库缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetSelfCreatableObject``1(System.String)">
            <summary>
            获取自创建对象实例
            </summary>
            <param name="asmKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetTargetObject``1(System.String)">
            <summary>
            函数组件创建方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.FormulaUtils.GetReflectObject(System.String)">
            <summary>
            函数组件创建方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.DataType">
            <summary>
            数据类型，如果是函数则为object; 0:Object
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.Type">
            <summary>
            0:变量;1:函数;
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.IFormulaFunctionParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.Name">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.DataType">
            <summary>
            数据类型，如果是函数则为object; 0:Object
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.Type">
            <summary>
            0:变量;1:函数;
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Formula.CommonFunctionParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Formula.IronPythonFormulaProvider">
            <summary>
            IronPython脚本实现提供者 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetFormulaText(System.Collections.Generic.IList{Kingdee.BOS.Formula.KDExpressionDataItem})">
            <summary>
            获取IronPython公式脚本
            </summary>
            <param name="formulaStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.Check(System.String)">
            <summary>
            公式检查
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetDependenceItems(System.String)">
            <summary>
            获取依赖项目
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetDependenceFunctions(System.String)">
            <summary>
            获取依赖的函数列表
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.Excute(System.String)">
            <summary>
            公式执行
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetExpItemScript(Kingdee.BOS.Formula.KDExpressionDataItem,System.Int32)">
            <summary>
            解析当个表达式节点
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetLogicNodeTrans(System.String)">
            <summary>
            逻辑节点处理
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.IronPythonFormulaProvider.GetLogicNodeTransSubFix(System.String)">
            <summary>
            逻辑节点后缀处理
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Formula.KDExpressionDataItem">
            <summary>
            公式的表达式行实体 ,yaojunsong,2011-8-22 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Formula.KDExpressionDataItem.Check(System.Int32@)">
            <summary>
            校验模型表达式是否正确
            </summary>
            <param name="baseLine"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Formula.KDExpressionDataItem.CheckExpression(System.String,System.String,System.String@)">
            <summary>
            表达式初步校验
            </summary>
            <param name="expNode"></param>
            <param name="exp"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Region">
            <summary>
            区域
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.Id">
            <summary>
            Id,主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.ReginName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.NumberFormat">
            <summary>
            数字（含货币）格式信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Region.DateTimeFormat">
            <summary>
            日期和时间格式信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.AuditStatus">
            <summary>
            已审核状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.UnForbidStatus">
            <summary>
            非禁用状态
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDTimeZone.#ctor(System.Int64,System.String,Kingdee.BOS.LocaleValue,System.TimeSpan,System.Boolean)">
            <summary>
            构造时区
            </summary>
            <param name="id">id</param>
            <param name="number">number</param>
            <param name="name">name</param>
            <param name="offset">offset</param>
            <param name="canBeUsed">是否可用</param>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.MinSystemDateTime">
            <summary>
            用户设定的系统时区的最小时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDTimeZone.MaxSystemDateTime">
            <summary>
            用户设定的系统时区的最大时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.UtcOffset">
            <summary>
            与零时区的偏差时间
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.StandardName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.Number">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.Id">
            <summary>
            Id,主键
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.ForbidStatus">
            <summary>
            禁用标记
            A:启用
            B:禁用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.DocumentStatus">
            <summary>
            状态
            A:创建
            B:提交
            C:审核
            ...
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDTimeZone.CanBeUsed">
            <summary>
            是否可用(=已审核+没有禁用）
            </summary>
        </member>
        <member name="T:Kingdee.BOS.IOperationParameter">
            <summary>
            操作服务执行参数接口
            </summary>
        </member>
        <member name="T:Kingdee.BOS.ISV">
            <summary>
            开发商
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.Id">
            <summary>
            开发商ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.Name">
            <summary>
            开发商名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.ISVSignal">
            <summary>
            开发商签名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.PackageSignal">
            <summary>
            包
            </summary>
        </member>
        <member name="P:Kingdee.BOS.ISV.DevCode">
            <summary>
            开发商代码。用于开发商组件前缀，长度为3位。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DataRelationConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataRelation"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataRelationConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataRelationConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataRelationConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction">
            <summary>
            描述一个差量化动作
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Keyword_Action">
            <summary>关键字：动作</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Keyword_Oid">
            <summary>关键字：编号</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetValue_Name">
            <summary>属性动作：赋值</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_Reset_Name">
            <summary>属性动作：重置</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetNull_Name">
            <summary>属性动作：设置为空</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Add_Name">
            <summary>列表动作：新增</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Edit_Name">
            <summary>列表动作：编辑</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Remove_Name">
            <summary>列表动作：移除</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Clear_Name">
            <summary>列表动作：清除（保留）</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.#ctor(System.Int32,System.String)">
            <summary>
            内部初始化
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Equals(System.Object)">
            <summary>重载了相等判断</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Equals(Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction)">
            <summary>
            判断两个动作是否相等。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.Equals(Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction,Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction)">
            <summary>静态的相等判断</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.GetHashCode">
            <summary>重载hashcode的获取</summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ToString">
            <summary>输出动作名称</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetValue">
            <summary>属性动作：赋值</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_Reset">
            <summary>属性动作：重置</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.PropertyAction_SetNull">
            <summary>属性动作：设置为空</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Add">
            <summary>列表动作：新增</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Edit">
            <summary>列表动作：编辑</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Remove">
            <summary>列表动作：移除</summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ListAction_Clear">
            <summary>列表动作：清除（保留）</summary>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonAction.ActionName">
            <summary>
            返回动作名称
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.#ctor(Kingdee.BOS.Serialization.DcxmlBinder)">
            <summary>
            创建 Dcxml的序列化和反序列化工具。
            </summary>
            <param name="binder">绑定器</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.#ctor(System.Collections.Generic.IEnumerable{Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType})">
            <summary>
            创建 Dcxml的序列化和反序列化工具。
            </summary>
            <param name="dts">传递默认的类型列表，默认创建ListDcxmlBinder</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.DeserializeFromString(System.String,System.Object)">
            <summary>
            对指定的文本执行反序列化操作
            </summary>
            <param name="xml">数据来源</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.Binder">
            <summary>
            返回/设置节点名称和实体类型的映射工具
            </summary>
        </member>
        <member name="P:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializer.SerializeComplexProperty">
            <summary>
            设置是否序列化复合属性的开关
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerReaderImplement">
            <summary>
            提供一种机制，提前分析属性操作的规律，以便优化性能。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerWriteImplement.Serialize(Kingdee.BOS.Orm.Metadata.DataEntity.IDataEntityType,System.Object,System.Object)">
            <summary>
            序列化实体数据，产生差量信息
            </summary>
            <param name="dt">当前实体的参考数据类型</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础实体，</param>
        </member>
        <member name="M:Kingdee.BOS.JSON.DynamicObjectSerialization.DcJsonSerializerWriteImplement.ListItemEquatable(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Object,System.Object,System.Func{System.String})">
            <summary>
            判断两个元素的主键值是否相等。 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON数组数据
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写JSON数组数据
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取JSON对象数据
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写JSON对象数据
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="F:Kingdee.BOS.KDNetwork.Redirector.ResponseCallBackExceptionDelegate">
            <summary>
            访问异常是处理委托
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.Redirector.SysncRequest(Kingdee.BOS.Log.AnalyseLogInfo,Kingdee.BOS.KDNetwork.RedirectorDelegate,System.String)">
            <summary>
            同步请求
            </summary>
            <param name="logInfo"></param>
            <param name="resultCallback"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.Redirector.RedirectRequest(Kingdee.BOS.Log.AnalyseLogInfo,Kingdee.BOS.KDNetwork.RedirectorDelegate,System.String)">
            <summary>
            异步请求
            </summary>
            <param name="logInfo"></param>
            <param name="resultCallback"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Kingdee.BOS.KDNetwork.Redirector.ToBase64(System.Byte[])">
            <summary>
            将Byte[]转换成Base64编码文本
            </summary>
            <param name="binBuffer">Byte[]</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.KDOAuthInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            已绑定微博后，通过客户KEY,SECRET来访微博。
            </summary>
            <param name="sAppKey">微博授权token key</param>
            <param name="sAppSecret">微博授权token key.</param>
            <remarks></remarks>
        </member>
        <member name="M:Kingdee.BOS.KDOAuthInfo.#ctor">
            <summary>
            初始化Oauth信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.WeiboUrl">
            <summary>
            微博地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.NetWorkID">
            <summary>
            网络地址：目前就是企业邮箱地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.CompanyNetworkID">
            <summary>
            企业网络ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.Account">
            <summary>
            微博用户名：邮箱@符之前的部分
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.AppKey">
            <summary>
            微博客户KEY;
            在微博创建应用时分配。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.AppSecret">
            <summary>
            微博客户Secret;在微博创建应用时分配。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.TokenKey">
            <summary>
            微博授权token key，在用户绑定微博时生成.
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.TokenSecret">
            <summary>
            微博授权 token secret，在用户绑定微博时生成..
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.Verify">
            <summary>
            微博OAuth授权时，通过回调URL获取，提供给第三步获取授权KEY时使用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.CallbackUrl">
            <summary>
            回调RUL：微博OAuth授权时，通过URL获取verify;
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.UserId">
            <summary>
            用户ID，用于获取用户相关的信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDOAuthInfo.Charset">
            <summary>
            Gets or sets the charset.
            </summary>
            <value>The charset.</value>
            <remarks></remarks>
        </member>
        <member name="T:Kingdee.BOS.KDSContext">
            <summary>
             电子表格报表平台上下文
             独立于Kingdee.Bos.Context,后期该Context还会扩展
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDSContext.SubSystemName">
            <summary>
             子系统名称（KDS、CR等）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDSContext.IsFromCR">
            <summary>
            是否来自合并报表
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDSContext.CustomParams">
            <summary>
             自定义参数
             使用CustomParams.Add(Key,Value)添加自定义参数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDThread.KDTimerManager">
            <summary>
            定时器管理器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.KDTimerManager.UserExperienceTimer">
            <summary>
            用户体验定时器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.KDTimerManager.timers">
            <summary>
            定时器字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.KDTimerManager.AddTimer(System.String,System.Threading.Timer)">
            <summary>
            把定时器加入
            </summary>
            <param name="timerKey">定时器的Key</param>
            <param name="timer">定时器</param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.KDTimerManager.ObtainTimer(System.String)">
            <summary>
            获取定时器
            </summary>
            <param name="timerKey">定时器的Key</param>
            <returns>定时器</returns>
        </member>
        <member name="T:Kingdee.BOS.KDThread.AsynResult">
            <summary>
            任务处理的返回值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.AsynResult.CreateUnsuccess(System.Exception)">
            <summary>
            创建失败返回值
            </summary>
            <param name="ex">产生的异常</param>
            <returns>失败的返回值</returns>
        </member>
        <member name="M:Kingdee.BOS.KDThread.AsynResult.CreateSuccess(System.String)">
            <summary>
            创建成功的返回值
            </summary>
            <param name="msg">成功信息</param>
            <returns>成功的返回值</returns>
        </member>
        <member name="P:Kingdee.BOS.KDThread.AsynResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDThread.AsynResult.Message">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDThread.AsynResult.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDThread.MainWorker">
            <summary>
            异步操作管理器
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.mtask">
            <summary>
            线程管理器中的管理线程
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.curTask">
            <summary>
            持有当前的任务，避免被垃圾回收回收掉。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.sync">
            <summary>
            通知
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.Start">
            <summary>
            启动所有任务队列中的任务。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.KDThread.MainWorker.allTasks">
            <summary>
            异步任务队列
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.QuequeTask(System.Action,System.Action{Kingdee.BOS.KDThread.AsynResult})">
            <summary>
            将任务放入任务队列
            </summary>
            <param name="action">新线程所</param>
            <param name="callback"></param>
        </member>
        <member name="M:Kingdee.BOS.KDThread.MainWorker.QuequeTask(Kingdee.BOS.Context,System.Action,System.Action{Kingdee.BOS.KDThread.AsynResult})">
            <summary>
            设置当前任务线程语言环境， 并将任务放入任务队列
            </summary>
            <param name="ctx"></param>
            <param name="action"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginResult">
            <summary>
            登录结果
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.LoginResultType">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.FormId">
            <summary>
            表单处理的内容（只有选择了DealWithForm后才有效）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.FormInputObject">
            <summary>
            表单处理的内容（只有选择了DealWithForm后才有效）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Authentication.LoginResult.ErrorStackTrace">
            <summary>
            增加一个服务端报错的堆栈信息，以便前端堆栈格式提示
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Authentication.LoginResultType">
            <summary>
            返回结果类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Success">
            <summary>
            登录成功
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.PWError">
            <summary>
            用户或密码错误
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Failure">
            <summary>
            登录失败
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.PWInvalid_Optional">
            <summary>
            密码验证不通过（可选的）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.PWInvalid_Required">
            <summary>
            密码验证不通过（强制的）
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.Wanning">
            <summary>
            登录警告
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Authentication.LoginResultType.DealWithForm">
            <summary>
            需要表单处理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.AnalyseLogConfigure">
            <summary>
            用户行为分析配置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.AnalyseLogConfigure.IsEqual(Kingdee.BOS.Log.AnalyseLogConfigure,Kingdee.BOS.Log.AnalyseLogConfigure)">
            <summary>
            是否相等
            </summary>
            <param name="configure1"></param>
            <param name="configure2"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Log.AnalyseLogConfigure.GetDcxmlSerializer">
            <summary>
            获取序列化对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Log.AnalyseLogConfigure.GetDataEntityType">
            <summary>
            获取对象类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.ClientNo">
            <summary>
            可同时发送数据的客户端的量，默认10个
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.ClientDataNo">
            <summary>
            一次下载的量，默认20条
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.SingleDataSize">
            <summary>
            当次发送量
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogConfigure.UpdateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.AnalyseLogConfigureBinder">
            <summary>
            用户行为分析配置绑定器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.AnalyseLogInfo">
            <summary>
            日志分析的信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.Url">
            <summary>
            发送的URL
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.NeedCallBack">
            <summary>
            是否需要回掉
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.Content">
            <summary>
            发送内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.EventName">
            <summary>
            发送服务端eventName
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.ContentType">
            <summary>
            正文类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.AnalyseLogInfo.IsBase64Call">
            <summary>
            根据访问返回的请求流，是否是base64形式
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.ICounter">
            <summary>
            计数器
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.DealWithResidual">
            <summary>
            处理残余的数据
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.Add(Kingdee.BOS.Log.CounterInfo)">
            <summary>
            增加一条记录
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Kingdee.BOS.Log.ICounter.Commit">
            <summary>
            手动提交到数据库
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.CounterInfo">
            <summary>
            日志分析的信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.ExecuteTime">
            <summary>
            统计时间（精确到日期）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.FunctionKey">
            <summary>
            功能点
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Log.CounterInfo.ProcessTime">
            <summary>
            操作经历的时间
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Log.Logger">
            <summary>
            日志记录组件
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Info(System.String,System.String)">
            <summary>
            记录提示信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Error(System.String,System.String,System.Exception)">
            <summary>
            记录错误信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.Debug(System.String,System.String)">
            <summary>
            记录调试信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
        </member>
        <member name="M:Kingdee.BOS.Log.Logger.GetSubSystemMessage(System.String,System.String)">
            <summary>
            拼装子系统标志和日志信息
            </summary>
            <param name="subSystem">子系统编码</param>
            <param name="message">日志信息</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.ProxyContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.GetServiceChannel">
            <summary>
            获取所有代理的配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.TryGetRegisteredService``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="interfaceType"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.GetService``1(System.Type,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="interfaceType"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.GetService``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="interfaceName"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.Add(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="interfaceName"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Kingdee.BOS.ProxyContainer.Add(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="interfaceType"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="P:Kingdee.BOS.ProxyContainer.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.MailUtils">
            <summary>
            邮件发送，目前只支持SMTP
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
            <param name="dictStream">附件：名称、内容</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
            <param name="port">端口</param>
        </member>
        <member name="M:Kingdee.BOS.Util.MailUtils.Sendmail(System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},System.String,System.String)">
            <summary>
            发送邮件。GMAIL要求指定支持SSL
            </summary>
            <param name="from">发件人</param>
            <param name="displayName">发件人显示名,可为空</param>
            <param name="toList">收件人列表</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="SMTPHost">SMTP服务器IP</param>
            <param name="port">端口</param>
            <param name="enableSSL">是否支持SSL</param>
            <param name="dictStream">附件：名称、内容</param>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsNumber(System.String)">
            <summary>
            判断输入的字符串只包含数字
            可以匹配整数和浮点数
            ^-?\d+$|^(-?\d+)(\.\d+)?$
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsEmail(System.String)">
            <summary>
            判断输入的字符串是否是一个合法的Email地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsURL(System.String)">
            <summary>
            判断输入的字符串是否是一个超链接
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsIPv4(System.String)">
            <summary>
            判断输入的字符串是否是表示一个IP地址
            </summary>
            <param name="input">被比较的字符串</param>
            <returns>是IP地址则为True</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RegexUtil.IsMatch(System.String,System.String)">
            <summary>
            调用Regex中IsMatch函数实现一般的正则表达式匹配
            </summary>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <param name="input">要搜索匹配项的字符串</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
        </member>
        <member name="T:Kingdee.BOS.Util.SequentialGuid">
            <summary>
            生成顺序的GUID
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialGuid.NewGuid">
            <summary>
            生成顺序的GUID，并对取回的值做了高低位的互换，如果要做截断处理，不要调用此方法，请用NewNativeGuid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.SequentialGuid.NewNativeGuid">
            <summary>
            生成顺序的GUID，原生未进行高低位调整
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.WorkflowMember.IMember.MemberTypeName(Kingdee.BOS.Context)">
            <summary>
            根据登陆语言，返回参与人类型名称，如"用户"，"角色"
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMessageSendWithBillInfo`1">
            <summary>
            消息发送信息(单据相关处理扩展)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMessageSendInfo`1">
            <summary>
            消息发送信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.Receivers">
            <summary>
            收件人
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendInfo`1.SenderId">
            <summary>
            发件人ID
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendWithBillInfo`1.KeyValue">
            <summary>
            业务数据主键值
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Msg.IMessageSendWithBillInfo`1.ObjectTypeId">
            <summary>
            业务对象Id
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMsgMember">
            <summary>
            收件人(用户、员工、部门、角色、组织等)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.IMsgUser">
            <summary>
            收件人(用户)
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.MsgType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.MsgType.WorkflowMessage">
            <summary>
            工作流消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.MsgType.CommonMessage">
            <summary>
            普通消息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.MsgType.BusinessFlowMessage">
            <summary>
            业务流程普通消息
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Msg.ReadStatus">
            <summary>
            阅读状态
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.ReadStatus.Unread">
            <summary>
            未读
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Msg.ReadStatus.Readed">
            <summary>
            已读
            </summary>
        </member>
        <member name="M:Kingdee.BOS.OrganizationInfo.Clone">
            <summary>
            克隆一份
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.BOSExpression">
            <summary>
            BOS表达式定义。
            <remarks>
            <para>
            注意：此类型支持被二进制序列化和BOS序列化。
            但是由于LocaleValue无法支持XML序列化，因此此类型也无法支持。
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.op_Implicit(System.String)~Kingdee.BOS.Scripting.Expression">
            <summary>
            允许将string隐式转换为Expression
            </summary>
            <param name="expression">待转换的字符串</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.#ctor">
            <summary>
            构造一个BOS表达式对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.#ctor(System.String,Kingdee.BOS.Scripting.ExpressionKind,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            根据给定的表达式和字段映射表来构造一个BOS表达式对象
            </summary>
            <param name="expressionText">表达式</param>
            <param name="kind">指定表达式的代码类型</param>
            <param name="fieldMap">字段映射表</param>
            <param name="exprTextHadChecked">表达式已经校验过，无须重复校验</param>
        </member>
        <member name="F:Kingdee.BOS.Scripting.Expression._exprTextHadChecked">
            <summary>
            表达式已经检查过，可以直接使用：通过此选项，避免循环中计算公式时，重复检查表达式，提升性能
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.MapField(System.String,System.String)">
            <summary>
            设置字段映射。用来将表达式中的字段翻译为显示文本或者真正的目标脚本
            <para>
            此方法支持Fluent编程，亦即你可以写出如下的代码：
            exp.MapField("name", "名称").MapField("age", "年龄")等等
            </para>
            </summary>
            <param name="fieldName">字段名</param>
            <param name="displayText">字段的显示名称</param>
            <returns>基于Fluent编程的快速接口</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.LookupVariables">
            <summary>
            查找出当前表达式包含的字段的集合。
            <para>
            【小提示】如果仅仅希望对一个单表达式做查找字段的动作。
            您也可以通过BOSExpression的静态方法：LookupVariables
            来达到同样的效果。
            </para>
            </summary>
            <returns>字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.LookupVariables(System.String)">
            <summary>
            查找出给定的表达式包含的字段的集合
            </summary>
            <param name="exp">待查找的表达式</param>
            <returns>字段集合</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.ProceedCompatiblity(System.String)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Expression.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.Title">
            <summary>
            获取或者设置表达式的标题，可为空。
            用来给此表达式一个简短的业务描述
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.CodeKind">
            <summary>
            表达式的代码类型。默认为自动检测
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.ExpressionText">
            <summary>
            获取或者设置表达式的真正表达式文本。类似于：
            [BillNo.Amount] > 200
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.DisplayText">
            <summary>
            获取表达式的显示文本。类似于：
            [单据头.金额] > 200
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Expression.CompiledCode">
            <summary>
            在编译后会调用此方法缓存编译结果。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.op_Implicit(System.String)~Kingdee.BOS.Scripting.BOSExpression">
            <summary>
            允许将string隐式转换为BOSExpression
            </summary>
            <param name="expression">待转换的字符串</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.#ctor">
            <summary>
            构造一个BOS表达式对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.#ctor(System.String,Kingdee.BOS.Scripting.ExpressionKind,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            根据给定的表达式和字段映射表来构造一个BOS表达式对象
            </summary>
            <param name="expressionText">表达式</param>
            <param name="fieldMap">字段映射表</param>
            <param name="exprTextHadChecked">表达式已经校验过，无须重复校验</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.ProceedCompatiblity(System.String)">
            <summary>
            对原生表达式进行兼容性处理。也可以重载此方法进行兼容性扩展
            </summary>
            <param name="expression">待处理的表达式</param>
            <returns> 处理后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.ProceedEqualCompatiblity(System.String@)">
            <summary>
            当代码为表达式类型时，可以将=替换为==
            </summary>
            <param name="expression">待分析的表达式</param>
            <returns>处理后的表达式</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.BOSExpression.ProceedAtVariableCompatiblity(System.String@)">
            <summary>
            将代码中的@符号替换为系统变量
            </summary>
            <param name="expression">待分析的表达式</param>
            <returns>处理后的表达式</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.CompiledExpression">
            <summary>
            编译后的表达式结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.Configuration.BOScriptConfiguration">
            <summary>
            表达式框架的配置类
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.BOScriptConfiguration.SectionName">
            <summary>
            获取配置项的名称
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.BOScriptConfiguration.Evaluators">
            <summary>
            获取可用的表达式解析器类型集合
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.Configuration.ConfigurationInitializer.LoadConfig">
            <summary>
            加载配置
            </summary>
            <returns>返回BOS表达式框架配置</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.Configuration.EvaluatorElement">
            <summary>
            扩展程序集配置
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorElement.CacheCapacity">
            <summary>
            表达式缓存数量。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorElement.MinCacheMinutes">
            <summary>
            表达式最小缓存时间（分钟）。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorElement.MaxCacheMinutes">
            <summary>
            表达式最大缓存时间（分钟）。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.Configuration.EvaluatorCollection">
            <summary>
            扩展程序集配置集合
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.Configuration.EvaluatorPackage.Default">
            <summary>
            默认配置器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.DynamicText">
            <summary>
            动态文本的定义和解析。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.DynamicText.op_Implicit(System.String)~Kingdee.BOS.Scripting.DynamicText">
            <summary>
            允许将string隐式转换为DynamicText
            </summary>
            <param name="text">待转换的字符串</param>
        </member>
        <member name="T:Kingdee.BOS.Scripting.EvaluatorConfig">
            <summary>
            表达式解析器配置
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.EvaluatorConfig.CreateInstance">
            <summary>
            获取一个解析器实例，如果这个实例已经存在，则将直接返回。
            </summary>
            <returns>解析器实例</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.EvaluatorConfig.CreateEvaluator">
            <summary>
            构造一个表达式解析器的实例
            </summary>
            <param name="path">基础函数库所在路径</param>
            <returns>返回表达式解析器的实例</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.EvaluatorConfig.LoadBaseFunctionScript(System.String)">
            <summary>
            加载基础函数库（BFL）定义脚本并返回内容
            </summary>
            <param name="path">脚本路径</param>
            <returns>返回脚本内容</returns>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.Name">
            <summary>
            配置名
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.EvaluatorType">
            <summary>
            解析器的类型
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.BFL">
            <summary>
            解析器的基本函数库（可选）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.CacheCapacity">
            <summary>
            解析器中表达式的缓存容量（个数）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.MinCacheMinutes">
            <summary>
            解析器中表达式的最小缓存时间（分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.MaxCacheMinutes">
            <summary>
            解析器中表达式的最大缓存时间（分钟）
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Scripting.EvaluatorConfig.Default">
            <summary>
            默认配置项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionKind">
            <summary>
            表达式的代码类型
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionKind.AutoDetect">
            <summary>
            在交给解析器执行的时候，由解析器自动检测
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionKind.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Scripting.ExpressionKind.Script">
            <summary>
            脚本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.TryGetValueHandler">
            <summary>
            对一个对象进行 get 操作的委托定义。
            </summary>
            <param name="key">要获取的字段、属性、函数或变量的键值。</param>
            <param name="value">如果获取成功，返回其值。</param>
            <returns>如果在此对象中存在此字段、属性、函数或变量，返回true，否则返回false.</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.TrySetValueHandler">
            <summary>
            对一个对象进行 set 操作的委托定义。
            </summary>
            <param name="key">要设置的字段、属性、函数或变量的键值。</param>
            <param name="newValue">此字段、属性或变量新的值。</param>
            <returns>如果成功设置返回true，否则false</returns>
        </member>
        <member name="T:Kingdee.BOS.Formula.FormulaCustomParams">
            <summary>
            运行时客户化参数结构
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.ExpressionFactory">
            <summary>
            表达式解析器构造工厂
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Run(Kingdee.BOS.Scripting.Expression,Kingdee.BOS.Scripting.ExpressionContext)">
            <summary>
            基于给定的上下文计算表达式的值。
            <remarks>将使用默认的解析器去解析</remarks>
            </summary>
            <param name="exp">表达式文本</param>
            <param name="ctx">表达式上下文</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Run``1(Kingdee.BOS.Scripting.Expression,Kingdee.BOS.Scripting.ExpressionContext)">
            <summary>
            基于给定的上下文计算表达式的值。
            <remarks>将使用默认的解析器去解析</remarks>
            </summary> 
            <typeparam name="T">返回值的类型</typeparam>
            <param name="exp">表达式文本</param>
            <param name="ctx">表达式上下文</param>
            <returns>计算结果</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Scripting.ExpressionFactory.Create”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Create(System.String)">
            <summary>
            根据给定的组合实例名称创建一个表达式解析器
            </summary>
            <param name="instanceName">配置文件中定义了的组合实例名称</param>
            <returns>表达式解析器实例</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.ExpressionFactory.Initialize">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Scripting.IExpressionEvaluator">
            <summary>
            表达式解析器接口。 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.InitializeEvaluator(Kingdee.BOS.Scripting.EvaluatorConfig)">
            <summary>
            根据给定的配置项初始化表达式解析器，包括初始化基础函数库以及缓存等。
            </summary>
            <param name="config">配置项</param>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.Run(Kingdee.BOS.Scripting.Expression,Kingdee.BOS.Scripting.ExpressionContext)">
            <summary>
            计算一条表达式，并返回计算的结果
            <para>
            注意：此表达式必须是带有返回值得单条表达式项，否则会抛出异常
            </para>
            </summary>
            <param name="expression">待执行的表达式</param>
            <param name="context">表达式执行所需的上下文</param>
            <returns>表达式计算结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.CheckGrammer(Kingdee.BOS.Scripting.Expression,System.String@)">
            <summary>
            验证表达式语法
            </summary>
            <param name="expression">待验证的表达式</param>
            <param name="errorMessages">错误信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.CheckGrammer(Kingdee.BOS.Scripting.Expression)">
            <summary>
            验证表达式语法，和少民讨论增加该接口
            </summary>
            <param name="expression">待验证的表达式</param>
            <returns>null:语法校验通过;no null:有语法错误</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.GetNameExpression(Kingdee.BOS.Scripting.Expression)">
            <summary>
            获取某个表达式中，出现的名称成员的结果。
            </summary>
            <param name="expression">要检查的表达式对象。</param>
            <returns>返回所有的名称成员，注意，返回的成员不能保证完全是字段，外界需要自行去除。</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.IExpressionEvaluator.GetFunctions(System.String)">
            <summary>
            获取某个表达式中，出现的名称成员的方法调用的结果。
            </summary>
            <param name="script">要检查的表达式文本。</param>
            <returns>返回所有的名称成员，注意，返回的成员不能保证完全是字段，外界需要自行去除。</returns>
        </member>
        <member name="T:Kingdee.BOS.Scripting.PyExpressionEvaluator">
            <summary>
            基于IronPython脚本引擎的表达式解析器实现
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Scripting.PyExpressionEvaluator.GetNameExpression(Kingdee.BOS.Scripting.Expression)">
            <summary>
            获取某个表达式中，出现的名称成员的结果。
            </summary>
            <param name="expression">要检查的表达式对象。</param>
            <returns>返回所有的名称成员，注意，返回的成员不能保证完全是字段，外界需要自行去除。</returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetLongDate(System.Object[])">
            <summary>
            获取长日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetShortDate(System.Object[])">
            <summary>
            获取短 日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetMaxDate(System.Object[])">
            <summary>
            获取最大日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetMinDate(System.Object[])">
            <summary>
            获取最小日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetUser(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetServicetype(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetMultiOrg(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Scripting.SysVariables.GetNullValue(System.Object[])">
            <summary>
            空变量
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.ServicesContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.ServicesContainer.GetServiceChannel">
            <summary>
            获取所有服务的配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionAuthorize">
            <summary>
            授权相关错误，由于授权引发的错误 
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDExceptionAuthorize.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            授权相关错误，由于授权引发的错误
            </summary>
            <param name="Code">错误编号</param>
            <param name="System">子系统</param>
            <param name="Module">模块</param>
            <param name="Function">功能点</param>
            <param name="Message">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionAuthorize.System">
            <summary>
            子系统
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionAuthorize.Module">
            <summary>
            所属模块
            </summary>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionAuthorize.Function">
            <summary>
            所属功能
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionDatabase">
            <summary>
            数据库操作引发错误
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDExceptionDatabase.#ctor(System.String,System.String,System.String)">
            <summary>
            数据库操作引发错误
            </summary>
            <param name="sCode">错误代码</param>
            <param name="sSqlSource">SQL脚本</param>
            <param name="sMessage">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionDatabase.SqlSource">
            <summary>
            错误的SQL脚本
            </summary>
        </member>
        <member name="T:Kingdee.BOS.KDExceptionValidate">
            <summary>
            验证信息类KDExceptionValidate
            </summary>
        </member>
        <member name="M:Kingdee.BOS.KDExceptionValidate.#ctor(System.String,System.String,System.String)">
            <summary>
            参数错误引发错误
            </summary>
            <param name="sCode">错误代码</param>
            <param name="sValidateString">错误的参数说明</param>
            <param name="sMessage">错误信息</param>
        </member>
        <member name="P:Kingdee.BOS.KDExceptionValidate.ValidateString">
            <summary>
            错误的参数说明
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Expression.ExpressionParser">
            描述: 表达式解析器
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.SplitVariables(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitVariables2(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitPropertise(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.isExpression(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.IsExpressionOrFunction(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitParameters(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitOperators(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.splitExtCompareOperator(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Expression.ExpressionParser.ParseFunction(System.String)">
            <summary>
            解析表达式中的函数名称, 参数列表
            </summary>
            <param name="expr">表达式</param>
            <returns>数组元素0为函数名称，其它元素为参数列表</returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.ParsePropertyAfterFunction(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.ParseFunctions(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.ParseDateTimes(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.CastRegular(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.SplitBarVariables(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.IsBracesVariable(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Kingdee.BOS.Expression.ExpressionParser.isTemporaryVariable(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:Kingdee.BOS.Expression.SysFuncParser">
            <summary>
            该类放在此处不合适，后续需要重构。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetLongDate(System.Object[])">
            <summary>
            获取长日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetShortDate(System.Object[])">
            <summary>
            获取短 日期系统时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetMaxDate(System.Object[])">
            <summary>
            获取最大日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetMinDate(System.Object[])">
            <summary>
            获取最小日期时间
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetUser(System.Object[])">
            <summary>
            获取当前用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Expression.SysFuncParser.GetNullValue(System.Object[])">
            <summary>
            空变量
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Globalization.IStringCultureUtil">
            <summary>
            主要功能: 
                1 对于System.Globalization.CompareInfo的封装
                2 对于字符串转化为数字等类型的判断的封装
                3 对于字符串数据相关的封装
                4 对于字符串大小写的封装
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Globalization.CultureManager">
            <summary>
            语言信息管理类,主要为国际化业务对象所调用
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Globalization.CultureManager.UserContext">
            <summary>
            用户上下文,主要使用里面的UserID\Locale
            此处需要作废
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Globalization.CultureManager.CurrentCulture">
            <summary>
            记录当前用户的当前语言信息(用户级)
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Globalization.CultureManager.CurrentLogCulture">
            <summary>
            记录日志的CultureInfo(系统级):默认为中文
            配置信息记录在Web.config中appsetting下logcultureinfo
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.JSONKEYS">
            <summary>
            Json数据包中的通用键值注册表
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.XType">
            <summary>
            控件类型 xtype
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Key">
            <summary>
            小写 key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KEY">
            <summary>
            首字大写 Key
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Value">
            <summary>
            值 发送"value"
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Title">
            <summary>
            字段 标题
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Store">
            <summary>
            待选存储
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.ShowEditButton">
            <summary>
            显示编辑按钮
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TextEditable">
            <summary>
            文本可编辑
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.Locals">
            <summary>
            设置多地区语种支持数据
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.GridColIndex">
            <summary>
            表格列索引 colIndex
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.GridColHidden">
            <summary>
            表格列隐藏hidden
            表格修改为可见属性了，这里统一调整
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.GridType">
            <summary>
            表格类型 GridType
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridType">
            <summary>
            树表控件类型 kdtreegrid
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridKeyFieldName">
            <summary>
            树表控件主键字段名 primaryKey
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridParentFieldName">
            <summary>
            树表控件父级组件字段名 parentFieldName
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridRowTypeFieldName">
            <summary>
            树表控件行类型字段名 rowTypeFieldName
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.TreeGridImageFieldName">
            <summary>
            树表控件节点图片字段名 imageFieldName
            </summary>
        </member>
        <member name="T:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys">
            <summary>
            甘特图表格对应的键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.dataIndex">
            <summary>
            列名称键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.header">
            <summary>
            列标题键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.colmap">
            <summary>
            甘特图表格内置列映射配置信息键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.propertyName">
            <summary>
            甘特图内置属性名键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.mapColumnName">
            <summary>
            甘特图内置属性对应的表格列名称键标识
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_TaskName">
            <summary>
            内置列标识：任务名称
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_StartTime">
            <summary>
            内置列标识：开始时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_FinishTime">
            <summary>
            内置列标识：结束时间
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_IsMileStone">
            <summary>
            内置列标识：是否关键任务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_Completion">
            <summary>
            内置列标识：进度
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_Predecessors">
            <summary>
            内置列标识：前置任务
            </summary>
        </member>
        <member name="F:Kingdee.BOS.JSON.JSONKEYS.KDGanttKeys.InnerColKey_Assignments">
            <summary>
            内置列标识：关联资源
            </summary>
        </member>
        <member name="M:Kingdee.BOS.JSON.JSONObject.GetValue``1(System.String,``0)">
            <summary>
            从JObject获取一个属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jobj"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.LanguageInfo">
            <summary>
            系统支持的语言信息
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LanguageInfo.InvariantLocaleId">
            <summary>
            中性语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.LocaleValue">
            <summary>
            多语言记录类，注意在BOS的商业处理中使用了其派生类，而不是当前类。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.LocaleValue.langCapacity">
            <summary>
            目前3中语言
            </summary>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.SetByLocaleId(System.Int32,System.String)">
            <summary>
            设置指定LocaleId的值
            </summary>
            <param name="localeId">LocaleId</param>
            <param name="value">值</param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.TryGetValue(System.Int32,System.String@)">
            <summary>
            检测特定LCID的语言设置，注意此函数在检测到此LCID未填写内容时，不会自动返回中性语言的数据
            </summary>
            <param name="localeId">LCID值</param>
            <param name="value">如果此LCID下包含数据，将返回此字符串信息，否则返回null</param>
            <returns>此LCID下是否包含了字符串信息，如果有，返回true</returns>
            <remarks>
            注意此方法被BOS的派生类OrmLocaleValue重载。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.ToString">
            <summary>
            转换成字符串的表示形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.ToString(System.Globalization.CultureInfo)">
            <summary>
            根据时区信息返回字符串的形式。
            </summary>
            <param name="culture">当前时区信息</param>
            <returns>字符串的形式。</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.op_Implicit(Kingdee.BOS.LocaleValue)~System.String">
            <summary>
            支持LocaleValue转换为字符串。
            </summary>
            <param name="localeValue">一个LocaleValue对象</param>
            <returns>本地时区对应的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.op_Implicit(Kingdee.BOS.LocaleValue)~System.Int32">
            <summary>
            支持LocaleValue转换为int。
            </summary>
            <param name="localeValue">一个LocaleValue对象</param>
            <returns>本地时区对应的int值</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Merger(Kingdee.BOS.LocaleValue,System.String,System.Boolean)">
            <summary>
            传入一个localValue，进行合并处理
            </summary>
            <param name="localeValue"></param>
            <param name="sp"></param>
            <param name="bAfter"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Merger(System.String,System.String,System.Boolean)">
            <summary>
            传入一个value，进行合并处理
            </summary>
            <param name="sValue"></param>
            <param name="sp"></param>
            <param name="bAfter"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.GetEnumerator">
            <summary>
            返回所有有效的区域字符
            </summary>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Equals(System.Object)">
            <summary>
            判断两个对象是否相等
            </summary>
            <param name="obj">另外一个比较的对象</param>
            <returns>如果另外一个对象也是LocaleValue且内部存储的数据相等，将返回true</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.GetHashCode">
            <summary>
            返回重新计算的Hashcode值，他将所有的语言数据进行比对。
            </summary>
            <returns>新的Hash值</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.ParseFromString(System.String,System.Globalization.CultureInfo)">
            <summary>
            解析字符串，将其数据附加到当前实例。
            </summary>
            <param name="source">字符串源对象</param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            从一个字符串转换成LocaleValue对象。
            </summary>
            <param name="source">字符串源</param>
            <param name="culture">进行转换时对应的时区</param>
            <returns>新的LocaleValue对象。</returns>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Add(System.Collections.Generic.KeyValuePair{System.Int32,System.String})">
            <summary>
            当插入一笔多语言数据时调用此方法。注意：ORMLocaleValue重载了此方法。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Kingdee.BOS.LocaleValue.Clear">
            <summary>
            当清除多语言数据时调用此方法。注意：ORMLocaleValue重载了此方法。
            </summary>
        </member>
        <member name="P:Kingdee.BOS.LocaleValue.Item(System.Int32)">
            <summary>
            通过给定区域编号，获取此区域的文本，如果函数在检测到此LCID未填写内容时，自动返回中性语言的数据
            </summary>
            <param name="localeId">区域编号</param>
            <returns>此区域的文本，如果未设置，自动返回中性语言的数据。</returns>
            <remarks>
            简体中文是默认的语言，因此如果填充简体中文（2052）的数据时，将自动填充到中性语言上。
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.LocaleValueConverter">
            <summary>
            LocaleValue的对象转换器，支持与字符串的互相转换。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Log.LogFactory.GetLog(System.Type)">
            <summary>
            (废弃无用的)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Rpc.FaultContractExceptionHandler">
            <summary>
            通过我们预定义好的契约处理服务器端抛出来的异常
            1 进行的我们规定的异常转换
            2 对于异常的扩展性进行支持，使开发人员感觉不到WCF的存在
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Rpc.FaultContractExceptionHandler.attributes">
            <summary>
            异常属性对应关系
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Rpc.FaultContractExceptionHandler.faultContractType">
            <summary>
            服务器端通用异常对象契约
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Rpc.FaultContractExceptionHandler.exceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.FaultContractExceptionHandler.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="faultContractType">服务器端通用异常对象契约</param>
            <param name="attributes">异常转换对应信息</param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.FaultContractExceptionHandler.#ctor(System.Type,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构造函数
            </summary>
            <param name="faultContractType">服务器端通用异常对象契约</param>
            <param name="exceptionMessage">系统自定义固定的异常信息替换掉原有的异常的Message信息</param>
            <param name="attributes">异常属性对应关系</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Kingdee.BOS.Rpc.FaultContractExceptionHandler.HandleException(System.Exception,System.Guid)">
            <summary>
            处理异常主函数
            按照我们的要求对于特定的异常（所有继承自KDException的类进行转换处理，其它的都认为是Unhandle Exception）
            </summary>
            <param name="exception">业务组件在服务器端抛出的错误.</param>
            <param name="handlingInstanceId">系统自动为该错误生成的"{Guid}".</param>
            <returns>An instance of <see cref="T:Kingdee.BOS.Rpc.FaultContractWrapperException"/>按照预定义的映射关系，
            将服务器端抛出来的错误转换成为预定义的作为服务器端TDetail的返回的FaultContractWrapperException</returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceCacheAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcServiceCacheBehavior">
            <summary>
            实现IOperationBehavior，在客户端和服务器端进行方法的拦截和处理
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcServiceCacheOperataionInvoker">
            <summary>
            操作行为的侵入
            可以支持缓存和性能探针的接口
            1 基于方法级缓存获取设置
            2 RPC中基于方法级的性能探针的处理
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcServiceCacheOperataionInvoker.InvokeName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ExceptionShieldingErrorHandler"/> class.
            </summary>
            <param name="exceptionPolicyName">Name of the exception policy.</param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.HandleError(System.Exception)">
            <summary>
            处理错误，如果返回true，系统将不会继续处理
            在异常返回给客户端之后被调用
            </summary>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            由我们对于错误进行自定义处理Provides the fault.
            在异常发生后，异常信息返回前被调用
            </summary>
            <param name="error">The error.</param>
            <param name="version">The version.</param>
            <param name="fault">The fault.</param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.BuildMessageFault(System.Exception,System.Guid)">
            <summary>
            Build the shielded MessageFault.
            </summary>
            <param name="serverException"></param>
            <param name="handlingInstanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcServiceErrorHandler.BuildMessageFault(Kingdee.BOS.Rpc.FaultContractWrapperException)">
            <summary>
            Build the unshielded MessageFault.
            </summary>
            <param name="faultContractWrapper"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcServiceErrorHandler.ExceptionPolicyName">
            <summary>
            Gets or sets the name of the exception policy.
            </summary>
            <value>The name of the exception policy.</value>
        </member>
        <member name="M:Kingdee.BOS.Rpc.ICommunication.CreateObject``1(System.String)">
            <summary>
            远程过程方法调用
            </summary>
            <param name="stypename">对象类型描述字符串："classname, assemblyname"</param>
            <param name="methodname">方法名称</param>
            <param name="pparams">参数列表</param>
            <returns>调用结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.LocalAccess.CreateObject``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RemoteAccess.CreateObject``1(System.String)">
            <summary>
            绑定方式、远程服务器地址均是配置完成，由外部配置工具完成
            支持不同方式编码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sClassName"></param>
            <param name="oParams"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RemoteAccess.CloseObject``1(``0)">
            <summary>
            关闭WCF通讯对象，此处必须和CreateObject成对调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="closeOjbect"></param>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RemoteAccess.BindingType">
            <summary>
            远程调用绑定方式
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RemoteAccess.ServerUrl">
            <summary>
            服务器地址127.0.0.1
            </summary>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.Rpc.RemoteCommunication”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Rpc.RemoteCommunication.#ctor(System.String)">
            <summary>
            构造函数，主要传入APP的服务地址
            </summary>
            <param name="ServerUrl"></param>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RemoteCommunication.CreateObject``1(System.String)">
            <summary>
            建立远程代理对象，必须和CloseObject成对
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sClassName">Kingdee.,Services</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RemoteCommunication.dctComms">
            <summary>
            用于通讯信道的缓存，以url为Key，存入对象
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcServiceErrorUtility">
            <summary>
            远程调用发生错误时的处理方法：记录日志、多语言处理、动态生成GUID
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Rpc.RpcSvcConst">
            <summary>
            Rpc远程调用服务地址配置类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcSvcConst.#ctor">
            <summary>
            构造函数，从配置文件中获取服务器端类与远程调用地址之间的关系，构造成字典
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.RpcSvcConst.GetSvcByKey(System.String)">
            <summary>
            根据配置生成RPC调用地址
            </summary>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcSvcConst.SvcConstRelativeCollect">
            <summary>
            远程调用对应服务的相对地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Rpc.RpcSvcConst.SvcConstValueCollect">
            <summary>
            远程调用对应服务描述的详细值
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Rpc.ServiceLocator.getCurrentServiceURL">
            返回当前账套的RPC服务地址
            @return
        </member>
        <member name="M:Kingdee.BOS.Rpc.ServiceLocator.setCurrentServiceURL(System.String)">
            设置当前账套的RPC服务地址
            @param url
        </member>
        <member name="T:Kingdee.BOS.SqlParam">
            <summary>
            Sql参数对象
            </summary>
            <remarks>
            针对封装的KSQL参数化数据访问接口定义的参数对象。包含参数名称、类型、值、输入输出属性。
            </remarks>
            <example>
            示例显示如何使用SqlParam
            <code>
            <![CDATA[
            DBService dbService = new DBService();
            List<SqlParam> list = new List<SqlParam>();
            list.Add( new SqlParam("x", DbType.Xml, xml));
            dbService.Execute(oractx, "UPDATE t_meta_objecttype SET FKERNELXML = @x where FID = 'BD_FLEXVALUESET';", list);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor(System.String,System.Data.DbType,System.Object)">
            <summary>
            数据访问参数对象构造函数
            </summary>
            <param name="name">参数名。（在SQL语句中请使用@标识参数名）</param>
            <param name="dbType">参数数据类型。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.#ctor(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            数据访问参数对象构造函数
            </summary>
            <param name="name">参数名。（在SQL语句中请使用@标识参数名）</param>
            <param name="dbType">参数数据类型。</param>
            <param name="value">值。</param>
            <param name="direction">参数输入输出类型。</param>
        </member>
        <member name="M:Kingdee.BOS.SqlParam.ConvertParamName(Kingdee.BOS.DatabaseType)">
            <summary>
            将参数化查询的的参数名进行转换
                对于Oracle数据库如果是@FName将转换为:FName
            </summary>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.SqlStorageType">
            <summary>
            字段数据库存储类型
            </summary>
            <remarks>
            SELECT * FROM systypes
            </remarks>
        </member>
        <member name="T:Kingdee.BOS.Switches">
            <summary>
            系统内置的调试开关。
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Switches.DisableCache">
            <summary>
            是否屏蔽缓存,当进行内存分析时，屏蔽缓存有助于分析内存的使用。
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.AssemblyUtils">
            <summary>
            动态加载与卸载程序集常用的方法
            add by linus wang at 2010-04-22
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.AssemblyUtils.LoadAssembly(System.String,System.Boolean)">
            <summary>
            加载程序集
            </summary>
            <param name="sFilePath"></param>
            <param name="bRecusive">是否独占式访问，若文件较大，则建议使用独占式访问</param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.CacheUtil">
            <summary>
            涉及到缓存的方法
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.GetCache(System.String,System.String,System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="area">ctx.DBId</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <returns>缓存对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.GetCache(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取缓存对象集合
            </summary>
            <param name="area"></param>
            <param name="region"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.SetCache(System.String,System.String,System.String,System.Object)">
            <summary>
            设置缓存对象
            </summary>
            <param name="area">ctx.DBId</param>
            <param name="region">固定Cache标识</param>
            <param name="key">缓存key</param>
            <param name="value">缓存对象</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.ClearCache(System.String,System.String)">
            <summary>
            清除区域缓存
            </summary>
            <param name="area">ctx.DBId</param>
            <param name="region">固定Cache标识</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CacheUtil.ClearCache(System.String,System.String,System.String)">
            <summary>
            清除某项缓存
            </summary>
            <param name="area">ctx.DBId</param>
            <param name="region">固定Cache区域</param>
            <param name="key">项标识</param>
        </member>
        <member name="T:Kingdee.BOS.Util.CalendarUtils">
            <summary>
            和日历相关的功能函数判断：如闰年、闰月、闰天
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CalendarUtils.GetWeekOfMonth(System.DateTime)">
            <summary>
            获取当天在本月的第几周
            </summary>
            <param name="time">当前时间</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CalendarUtils.IsLeapMonth(System.Int32,System.Int32)">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CalendarUtils.IsLeapYear(System.Int32)">
            <summary>
            是否闰年
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.GetTypeKeyConfig(System.String)">
            <summary>
            获取配置文件中某个节点的值
            </summary>
            <param name="strKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.UpdateAppConfig(System.String,System.String,System.String)">
            <summary>
            更新指定config文件的指定值
            </summary>
            <param name="fileName"></param>
            <param name="newKey"></param>
            <param name="newValue"></param>
        </member>
        <member name="F:Kingdee.BOS.Util.CommonUtil.serviceClientSetting">
            <summary>
            缓存ServiceClientSetting
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.UpdateAppConfig(System.String,System.String)">
            <summary>
            在＊.exe.config文件中appSettings配置节增加一对键、值对
            </summary>
            <param name="newKey"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.CommonUtil.LoadServiceClientSetting">
            <summary>
            从缓存中读取ServiceClientSetting
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.ServiceClientSetting">
            <summary>
            服务器的客户端配置信息
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.LoadSetting(System.Boolean)">
            <summary>
            
            </summary>
            <param name="relative"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.GetAppExePath">
            <summary>
            获得应用程序路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ServiceClientSetting.Save">
            <summary>
            保存登陆信息
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.ServiceClientSetting.ConfigRootFolder">
            <summary>
            本地配置根目录
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.ServiceClientSetting.AppItems">
            <summary>
            保存键/值对
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.KeyValueData">
            <summary>
            其他可扩展项
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.AppItem">
            <summary>
            应用程序项
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.KDServiceSite">
            <summary>
            服务地址
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.KeyValues">
            <summary>
            保存键/值对
            </summary>
        </member>
        <member name="P:Kingdee.BOS.Util.AppItem.AppPath">
            <summary>
            应用程序路径
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.ConfidentialDataSecurityUtil">
            <summary>
            密码加密算法类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CurrentVer">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.actions">
            <summary>
            密码算法的表函数,对密码进行版本管理。
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.IsCurVerConfidentialDataSecurityKey(System.String)">
            <summary>
            是否是最新版的加密私钥
            </summary>
            <param name="confidentialDataSecurityKey"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenSecurityPW(System.String,System.String)">
            <summary>
            区别版本的密码安全算法
            </summary>
            <param name="passWord">密码明文</param>
            <param name="salt">私钥，请务必用ConfidentialDataSecurityUtil.ConfidentialDataSecurityKey生成</param>
            <returns>加密的密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenVSecurityPW(System.String,System.String)">
            <summary>
            区别版本的密码安全算法
            </summary>
            <param name="passWord">密码明文</param>
            <param name="salt">私钥，请务必用ConfidentialDataSecurityUtil.ConfidentialDataSecurityKey生成</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CombineSecurityPW(System.Byte[],System.Byte[])">
            <summary>
            为密码加入Salt
            算法：把两个数据的字节一对一交叉嵌入进去，再把较长的数据剩余部分往后面拼接；
            </summary>
            <param name="b1">较短的数组</param>
            <param name="b2">较长的数组</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.GenSecurityPW_V0(System.String,System.String)">
            <summary>
            新的密码加密算法。
            </summary>
            <param name="passWord">密码</param>
            <param name="salt">调料</param>
            <returns>加密的密码</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.HashString(System.String)">
            <summary>
            为了保证兼容性/在登入时使用。
            </summary>
            <param name="str">输入的值</param>
            <returns>Hash</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CipherText(System.String)">
            <summary>
            对字符串进行加密
            </summary>
            <param name="proclaimText"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.CipherDataCenterText(Kingdee.BOS.DataCenterInfo.AbstarctDataCenterInfo,System.Boolean)">
            <summary>
            对数据中心进行加密
            </summary>
            <param name="dataCenterInfo"></param>
        </member>
        <member name="P:Kingdee.BOS.Util.ConfidentialDataSecurityUtil.ConfidentialDataSecurityKey">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.CultureInfoUtils">
            <summary>
            主要是负责国际化相关的功能类
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetOSSelectLanguageLocaleCode">
            <summary>
            获取操作系统选定的语言LocaleCode
            </summary>
            <example>
            string strLocaleCode = CultureInfoUtils.GetOSSelectLanguageLocaleCode()
            </example>
            <returns>LocaleCode : 例如 "zh-CN","en-US"</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetOSSelectLanguageLocaleID">
            <summary>
            获取操作系统选定的语言LocaleCode
            </summary>
            <example>
            int iLangID = GetSystemDefaultLangID();
            </example>
            <returns>LocaleID : 例如 "2052","1033"</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.SetCurrentLanguage(Kingdee.BOS.Context,System.Int32)">
            <summary>
            设置当前线程的语言
            </summary>
            <param name="language">zh-CN,zh-HK,en-US</param>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.SetCurrentLanguage(Kingdee.BOS.Context)">
            <summary>
            根据当前登陆上下文设置当前语言, 登陆用户调用这个方法
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetMutiLanguageName(System.String,System.String)">
            <summary>
            按照指定的规则，获得指定的多语言名称
            </summary>
            <param name="sName"></param>
            <param name="LanguageID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetUserLangSilverlight(System.String)">
            <summary>
            获取客户端控件语言包
            </summary>
            <param name="localID"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetRegionInfo(Kingdee.BOS.Region)">
            <summary>
            根据当前的时区，返回时区信息给客户端用
            </summary>
            <param name="curTimeZone">当前时区</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.CultureInfoUtils.GetLanguagsPackage(Kingdee.BOS.Context)">
            <summary>
            依据上下文获取语言列表数据包（非资源包）
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:Kingdee.BOS.Util.DateTimeFormatUtils”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.ToString(System.DateTime)">
            <summary>
            采用CultureInfo中标准日期格式进行输出
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.DateTimeFormatUtils.ToString(System.DateTime,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.ToKSQlFormat(System.DateTime)">
            <summary>
            输出ksql日期格式
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.IsValidDate(System.DateTime)">
            <summary>
            判断是否是真正的日期
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.BeginDateTimeOfDay(System.DateTime)">
            <summary>
            当天第一分钟  "2010-01-01 00:00:00"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DateTimeFormatUtils.EndDateTimeOfDay(System.DateTime)">
            <summary>
            当天第一分钟  "2010-01-01 00:00:00"
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetString(System.Data.IDataReader,System.String)">
            <summary>
            获取string字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>string</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetInt(System.Data.IDataReader,System.String)">
            <summary>
            获取int字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>int</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetIntCompatibleNull(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            获取int字段值，兼容Null值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <param name="NullConvert">如果字段为null,强制返回的值</param>
            <returns>int字段值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetBoolean(System.Data.IDataReader,System.String)">
            <summary>
            获取bool字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>bool</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            获取dateTime字段值
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>dateTime</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetIntEx(System.Data.IDataReader,System.String)">
            <summary>
            获取int结构
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>int结构</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetBooleanEx(System.Data.IDataReader,System.String)">
            <summary>
            获取bool结构
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>bool的结构</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetDateTimeEx(System.Data.IDataReader,System.String)">
            <summary>
            获取dateTime结构
            </summary>
            <param name="dr">记录集合</param>
            <param name="fieldName">字段名</param>
            <returns>dateTime结构</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ConvertTo``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            转换从数据库读取出来的数据到指定的类型
            </summary>
            <typeparam name="T">希望转换的数据类型</typeparam>
            <param name="value">希望转换的原始数据。</param>
            <param name="convertFunc">允许指定一个转换器函数，如果未指定，系统将试图寻找默认的转换器。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ConvertTo``1(System.Object,System.Func{System.Object,``0},``0)">
            <summary>
            转换从数据库读取出来的数据到指定的类型
            </summary>
            <typeparam name="T">希望转换的数据类型</typeparam>
            <param name="value">希望转换的原始数据。</param>
            <param name="convertFunc">允许指定一个转换器函数，如果未指定，系统将试图寻找默认的转换器。</param>
            <param name="defaultValue">如果原始数据是DbNull或null时，应该返回的值。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.CreateDefaultConvertFunc">
            <summary>
            创建转换器字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ToGuid(System.Object)">
            <summary>
            转换对象的值到Guid
            </summary>
            <param name="value">要转换的值，支持byte、string转换到guid</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.ToBoolean(System.Object)">
            <summary>
            主要是处理 0,1 这种表示形式。
            </summary>
            <param name="value">需要处理对象</param>
            <returns>处理结果</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.AddConvertFunc``1(System.Collections.Generic.Dictionary{System.Type,System.Object},System.Func{System.Object,``0})">
            <summary>
            将指定类型转换器压入字典中
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="funcs">转换器</param>
            <param name="func">转换器集合</param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.DBReaderUtils.GetDefaultConvertFunc``1”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.String)">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="fieldName">字段的名称</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.String,System.Func{System.Object,``0})">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="fieldName">字段的名称</param>
            <param name="convertFunc">数据的强制转换函数</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.Int32)">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="index">字段的所在的索引</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.DBReaderUtils.GetValue``1(System.Data.IDataRecord,System.Int32,System.Func{System.Object,``0})">
            <summary>
            IDataReader的扩展读取方法，可以指定数据类型，如果读取的字段是DbNull，将返回此类型的缺省值
            </summary>
            <typeparam name="T">此字段的数据类型</typeparam>
            <param name="dr">读取器</param>
            <param name="index">字段的所在的索引</param>
            <param name="convertFunc">数据的强制转换函数</param>
            <returns>最后的结果，如果读取的字段是DbNull，将返回此类型的缺省值</returns>
        </member>
        <member name="T:Kingdee.BOS.Util.Extentions">
            <summary>
            通用转换工具类,扩展类型方法的公用函数集，使用Using Kingdee.BOS.Util 即可。yaojunsong
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToMD5String(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetMD5String(System.String)">
            <summary>
            将字符串用MD5进行HASH。只取29位
            </summary>
            <param name="strtmp"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetUtf8Bytes(System.String)">
            <summary>
            
            </summary>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.GetUtf8String(System.Byte[])">
            <summary>
            
            </summary>
            <param name="binBuffer"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.ToBase64(System.Byte[])">
            <summary>
            将Byte[]转换成Base64编码文本
            </summary>
            <param name="binBuffer">Byte[]</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.Extentions.Base64ToBytes(System.String)">
            <summary>
            将Base64编码文本转换成Byte[]
            </summary>
            <param name="base64">Base64编码文本</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetRandomString(System.Int32)">
            <summary>  
            Generate random string  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.GetRandomColor">
            <summary>  
            Generate random Color  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.CreateValidateCodeImage(System.Int32,System.String@)">
            <summary>  
            Create Validation Code Image  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.drawLine(System.Drawing.Graphics,System.Drawing.Bitmap,System.Random)">
            <summary>  
            Draw Line for noise  
            </summary>  
        </member>
        <member name="M:Kingdee.BOS.Util.ImageUtil.drawPoint(System.Drawing.Bitmap,System.Random)">
            <summary>  
            Draw Point for noise  
            </summary>  
        </member>
        <member name="T:Kingdee.BOS.Util.ListUtils">
            <summary>
            实现泛型集合类与DataTable间的互相转换
            add by linus wang at 2010-04-27
            应用场景：Dev的表格控件虽然可以绑定一些集合类型的数据源，但是却不支持添加行这样的编辑，所以如果把集合转换成
                     DataTable之后再绑定，就会解决上述问题。
            </summary>
            <remarks>实现泛型集合类与DataTable间的互相转换</remarks>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            检测一个集合是否为空
            </summary>
            <typeparam name="T">集合元素的类型</typeparam>
            <param name="col">集合实例</param>
            <returns>如果集合未包含任何元素，那么返回true,否则返回false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ListUtils.JoinEx(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            将一个字符的列表集合转化为带分隔符的字符串
            </summary>
            <param name="list"></param>
            <param name="seporator"></param>
            <param name="addquot"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetLocalComputerName">
            <summary>
            当前计算机的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalComputer.GetHostName">
            <summary>
            获取本机的机器名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.LocalIp.GetLocalIp">
            <summary>
            获得本地ip
            </summary>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.MathUtil">
            <summary>
            数学运算工具类
            </summary>
        </member>
        <member name="F:Kingdee.BOS.MathUtil.mode">
            <summary>
            四舍五入模式，可配置
            暂时设置为四舍六入五成双
            </summary>
        </member>
        <member name="M:Kingdee.BOS.MathUtil.Round(System.Decimal,System.Int32,Kingdee.BOS.RoundMode)">
            <summary>
            十进制四舍五入
            </summary>
        </member>
        <member name="M:Kingdee.BOS.MathUtil.Round(System.Double,System.Int32,Kingdee.BOS.RoundMode)">
            <summary>
            双精度数四舍五入
            </summary>
            <param name="value"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.AwayFromZero">
            <summary>
            四舍五入
            </summary>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.ToEven">
            <summary>
            设置为四舍六入五成双
            </summary>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.Carry">
            <summary>
            按精度进位
            </summary>
        </member>
        <member name="F:Kingdee.BOS.RoundMode.Truncation">
            <summary>
            按精度舍尾
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsNullOrEmpty(System.Object)">
            <summary>
            判断指定的对象是否是空引用，或空字符串。
            </summary>
            <param name="value">需要测试的对象</param>
            <returns>如果 value 参数为空引用或空字符串 ("")，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsNullOrEmptyOrWhiteSpace(System.Object)">
            <summary>
            判断指定的对象是否是空引用，或空字符串， 或空白字符。
            </summary>
            <param name="value">需要测试的对象</param>
            <returns>如果 value 参数为空引用或空字符串 ("")或空白字符，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.CreateCopy(System.Object)">
            <summary>
            为对象创建一个拷贝
            </summary>
            <param name="obj">需要创建拷贝的对象</param>
            <returns>新建立的拷贝对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.CreateCopy(System.Object,Kingdee.BOS.Util.FormatterType)">
            <summary>
            为对象创建一个拷贝
            </summary>
            <param name="obj">需要创建拷贝的对象</param>
            <param name="formatterType">格式类型</param>
            <returns>新建立的拷贝对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.GetObjectSream(System.Object)">
            <summary>
            将对象序列化为字节流
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns>序列化后的字节流</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.GetObject(System.Byte[])">
            <summary>
            将字节流反序列化为对象
            </summary>
            <param name="bytes">需要反序列化的字节流</param>
            <returns>反序列化后的对象</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.IsEmptyPrimaryKey(System.Object)">
            <summary>
            判断返回主键值是否是一个无效的值。
            </summary>
            <param name="pkValue">主键值</param>
            <returns>主键值是一个无效的值，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.Object2String(System.Object)">
            <summary>
            返回字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.ObjectUtils.Object2Int(System.Object,System.Int32)">
            <summary>
            得到对象对应的数值
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="iDefaultValue">默认值</param>
            <returns>得到的int值</returns>
        </member>
        <member name="T:Kingdee.BOS.Util.OperateOptionUtils">
            <summary>
            扩展OperateOption参数对象的方法；
            主要用来扩展属性，方便强命名访问
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIgnoreWarning(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获取忽略警告参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIgnoreWarning(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置忽略警告参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetOnlyValidate(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            操作选项，只验证，不执行具体操作
            </summary>
            <param name="option"></param>
            <param name="onlyValidate"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetOnlyValidate(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            操作选项，只验证，不执行具体操作
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetValidateFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否需要校验标志
            </summary>
            <param name="option"></param>
            <param name="validateFlag"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.OperateOptionUtils.GetValidateFlag(Kingdee.BOS.Orm.OperateOption)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetBOSValidateFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否需要平台校验标志
            </summary>
            <param name="option"></param>
            <param name="validateFlag"></param>
        </member>
        <!-- 对于成员“M:Kingdee.BOS.Util.OperateOptionUtils.GetBOSValidateFlag(Kingdee.BOS.Orm.OperateOption)”忽略有格式错误的 XML 注释 -->
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetOperationParameter(Kingdee.BOS.Orm.OperateOption,Kingdee.BOS.IOperationParameter)">
            <summary>
            设置操作服务的参数
            </summary>
            <param name="option"></param>
            <param name="operationParameter"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetOperationParameter(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            获得操作服务的参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIsThrowValidationInfo(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否抛出校验信息
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIsThrowValidationInfo(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            是否抛出校验信息
            </summary>
            <param name="option"></param>
            <param name="isThrowValidation"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetCacheMetadata(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否缓存已处理过的元数据结果,默认值是true（内部变量名：CacheMetadata）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>当前选项的值</returns>
            <remarks>
            引擎在对实体进行CRUD操作前，需要分析实体的元数据信息已产生映射关系，为提高效率，引擎默认
            会缓存分析后的结果，以便后面操作相同类型的实体时不再重新分析。但是，如果你的实体类型仅使用一次
            且可能产生很多此类的临时类型，会造成缓存命中率下降。当对此情况请设置参数为false，以通知引擎不再
            缓存分析结果。
            </remarks>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetThrowExceptionWhenNotFind(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            是否在没有找到指定编号的数据时，触发异常，默认为true。（内部变量名：ThrowExceptionWhenNotFind）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>是否触发异常。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIgnoreScopeValidateFlag(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置操作选项，是否忽略范围校验
            </summary>
            <param name="option"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIgnoreScopeValidateFlag(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回参数，是否忽略范围校验
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.SetIsFromImport(Kingdee.BOS.Orm.OperateOption,System.Boolean)">
            <summary>
            设置操作选项，是否来源于引入:仅保存操作有效，其余操作无效
            </summary>
            <param name="option"></param>
            <param name="value"></param>
        </member>
        <member name="M:Kingdee.BOS.Util.OperateOptionUtils.GetIsFromImport(Kingdee.BOS.Orm.OperateOption)">
            <summary>
            返回参数，是否来源于引入:仅保存操作有效，其余操作无效
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.PathUtils.GetValidFileName(System.String)">
            <summary>
            得到一个合法的文件名：fileName为空，返回一个随机Guid作为文件名，否则移除掉文件名中的非法字符
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.RegistryHelper">
            <summary>
            注册表访问帮助器
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.RequestUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.GetApplicationPath">
            <summary>
            获得绝对路径前缀,例如http://192.168.18.169/k3cloud/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RequestUtils.ClearClientPageCache">
            <summary>
            清空浏览器客户端的缓存
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.RpcUtils.GetBindingByType(System.Int32)">
            <summary>
            获取配置好的Rpc绑定方式
            </summary>
            <param name="iType"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.RpcUtils.GetHostNameByIp">
            <summary>
            获取本机的Ip地址，如果是多IP，返回第一个IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.SerializeToXml``1(``0)">
            <summary>
            对象实例序列化为XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.SerializatonUtil.DeserializeFromXml``1(System.String)">
            <summary>
            将XML序列化为对象实例
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Kingdee.BOS.Util.IdObject">
            <summary>
            定义了直接使用的，作为返回值的对象
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdObject.Id">
            <summary>
            对象的编号
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNumberObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Number字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNumberObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNumberObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNumberObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNumberObject.Number">
            <summary>
            对象的编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id和Name字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameObject.Name">
            <summary>
            对象的名称
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameNumberObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Code字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameNumberObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameNumberObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameNumberObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameNumberObject.Number">
            <summary>
            对象的编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameLocaleIdObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Code字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameLocaleIdObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameLocaleIdObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameLocaleIdObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameLocaleIdObject.LocaleId">
            <summary>
            对象名称对应的语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameDescriptionObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Description字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameDescriptionObject.Description">
            <summary>
            对象的编码
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject">
            <summary>
            定义了直接使用的，作为返回值的对象。包含Id、Name和Description字段
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.Equals(System.Object)">
            <summary>
            重载了相等处理
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.GetHashCode">
            <summary>
            重载了HashCode
            </summary>
            <returns>新的HashCode</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.ToString">
            <summary>
            重新定义字符串的输出
            </summary>
            <returns>新的字符输出</returns>
        </member>
        <member name="P:Kingdee.BOS.Util.IdNameDescriptionLocaleIdObject.LocaleId">
            <summary>
            对象名称对应的语言
            </summary>
        </member>
        <member name="T:Kingdee.BOS.Util.StringUtils">
            <summary>
            字符串函数
            </summary>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Traditional2Simplified(System.String)">
            <summary>
            将字符串由繁体中文转为简体中文
            </summary>
            <param name="text">需要转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Simplified2Traditional(System.String)">
            <summary>
            将字符串7由简体中文转为繁体中文
            </summary>
            <param name="text">需要转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ToJSONObject(System.String)">
            <summary>
            将指定JSON字符串转成JSONObject
            </summary>
            <param name="parameters">字符串</param>
            <returns>JSONObject</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ToJSONArray(System.String)">
            <summary>
            将指定JSON字符串转成JSONArray
            </summary>
            <param name="parameters">字符串</param>
            <returns>JSONArray</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.LengthOfChar(System.String)">
            <summary>
            统计字条串中字符的个数(区分Unicode)
            </summary>
            <param name="str">字符串</param>
            <returns>个数</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.SplitRegex(System.String,System.String)">
            <summary>
            在指定的正则表达式模式所定义的位置，拆分指定的输入字符串。
            </summary>
            <param name="str1">要拆分的字符串</param>
            <param name="strRegex">要匹配的正则表达式</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.SplitRegex(System.String,System.String,System.Int32)">
            <summary>
            在指定的正则表达式模式所定义的位置，将指定的输入字符串拆分指定的最大次数。
            </summary>
            <param name="str1">要拆分的字符串</param>
            <param name="strRegex">要匹配的正则表达式</param>
            <param name="limit">可拆分的最大次数</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            判断指定的字符串是否相等(忽略大小写)
            </summary>
            <param name="str1">要比较的第一个字符串</param>
            <param name="str2">要比较的第二个字符串</param>
            <returns>如果认为对象相等，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsDate(System.String)">
            <summary>
            判断指定的字符串是否是日期
            </summary>
            <param name="sInput">要判断的字符串</param>
            <returns>如果是日期， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsNumeric(System.String)">
            <summary>
            判断指定的字符串是否是数值
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是数值， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsInt(System.String)">
            <summary>
            判断指定的字符串是否是整数
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是整数， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsUnsign(System.String)">
            <summary>
            判断指定的字符串是否是无符号数值
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是无符号数值， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsEmpty(System.String)">
            <summary>
            判断指定的字符串是否是空引用，或空字符串
            </summary>
            <param name="str">要判断的字符串</param>
            <returns>如果字符串是NULL引用或者是Empty， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.IsNumberAndLetters(System.String)">
            <summary>
            判断指定的字符串是否是由数字及26个英文字母组成
            </summary>
            <param name="str">要判断的字符串</param>
            <returns>如果字符串是由数字及26个英文字母组成， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CustomReplace(System.String,System.String,System.String,System.Char)">
            <summary>
            字符串替换函数，可以指定替换时排除指定字符包含的部分
            </summary>
            <param name="source">字符串</param>
            <param name="subSrc">被替换字符串</param>
            <param name="subDest">替换字符串</param>
            <param name="tag">指定替换时排除指定字符包含的部分的字符标识</param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            在指定输入字符串内，使用指定替换字符串替换第一个被替换字符串。 
            </summary>
            <param name="input">输入字符串</param>
            <param name="oldValue">被替换字符串</param>
            <param name="newValue">替换字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.CharAt(System.String,System.Int32)">
            <summary>
            取得字符串中指定索引处的字符
            </summary>
            <param name="str">需要搜索的字符串</param>
            <param name="i">索引</param>
            <returns>指定索引处的字符</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetStringEx(System.String,System.String,System.String)">
            <summary>
            返回指定位置的特定分隔字符串中的以关键字命名的某段字符串
            如  a=1 | b=2| c=3
            输入 b 返回 2
            </summary>
            <param name="sString">按特定分隔字符串分割的字符串</param>
            <param name="sSegment">关键字</param>
            <param name="sP">分割字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.GetString(System.String,System.Int32,System.String)">
            <summary>
            返回指定位置的特定分隔字符串中的某段字符串
            </summary>
            <param name="sString">按特定分隔字符串分割的字符串</param>
            <param name="iPosition">位置</param>
            <param name="sP">分割字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Inside(System.String,System.String[])">
            <summary>
            判断字符串是否包含指定的字符集中
            </summary>
            <param name="key">需要判断的字符串</param>
            <param name="value">指定的字符集</param>
            <returns>如果定义的字符集中包含字符串， 则为true； 否则为false</returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.Union``1(System.Collections.Generic.IEnumerable{``0[]})">
            <summary>
            合并，去掉相同项
            </summary>
            <param name="lists"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.FixedOrcalXMLString(System.String)">
            <summary>
            将已转义的转义字符还原
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.EscapeXMLStr(System.String)">
            <summary>
            字符转义
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Kingdee.BOS.Util.StringUtils.JoinFilterString(System.String,System.String,System.String)">
            <summary>
            把两个过滤条件拼接到一起；  
            </summary>
            <param name="str1">过滤条件一</param>
            <param name="str2">过滤条件二</param>
            <param name="separator">默认以“AND”为逻辑连接符</param>
            <returns></returns>
        </member>
        <member name="P:Kingdee.BOS.WorkflowMember.UserMember.ParticipantType">
            <summary>
            参与人类型  设计时定义的参与人维度编码（如： post）
            </summary>
        </member>
    </members>
</doc>
